{
    "What is CM_SLAC_PARM.REQ?": "# Overview\n\n**CM_SLAC_PARM.REQ** is a message used in the context of the Signal-Level Attenuation Characterization (SLAC) matching process between an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE). This request message is crucial for initiating or retrying the negotiation of parameters necessary for establishing a communication link between the EV and EVSE. The process is governed by specific timing and error-handling protocols as defined in the ISO 15118 standard.\n\n---\n\n## 1. Functional Description\n\nBefore the signal strength measurement begins, the EV broadcasts the parameters to be used for the subsequent signal strength measurement sequence through the **CM_SLAC_PARM.REQ** message. This message is sent to any unmatched EVSE that receives the parameter exchange broadcast. The EVSE, upon receiving this request, responds with a confirmation message, **CM_SLAC_PARM.CNF**, indicating its readiness to proceed with the matching process.\n\n### Related Messages\n- **CM_SLAC_PARM.CNF**: This is the confirmation message sent by the EVSE in response to a valid **CM_SLAC_PARM.REQ**. It signifies that the EVSE is ready to engage in the SLAC matching process.\n\n---\n\n## 2. Involved Entities\n\nThe SLAC matching process involves several key entities, each playing a specific role:\n\n1. **EV Host**: Coordinates the overall communication on the EV side and initiates the SLAC matching sequence.\n2. **EV PLC Node**: The low-layer communication module of the EV that sends and receives SLAC messages, including **CM_SLAC_PARM.REQ**.\n3. **EVSE PLC Node**: The low-layer communication module of the EVSE that responds to requests from the EV PLC node and sends the **CM_SLAC_PARM.CNF** message when ready.\n4. **EVSE Host**: Manages the EVSE side and can send commands to the EVSE PLC node.\n\n---\n\n## 3. Timing and Constants\n\nThe SLAC matching process is governed by various timers that manage the timing of requests and responses. Key timers include:\n\n- **TP_EV_SLAC_init**: Time between plug-in detection and the start of matching by the EV.\n- **TT_match_response**: Time the EV waits for a response to the **CM_SLAC_PARM.REQ** message.\n- **TT_matching_repetition**: Duration for repetitions of the matching process when an error occurs.\n- **TT_matching_rate**: Time to wait before retrying the entire matching process after a failure.\n\nThese timers ensure that the communication process is efficient and can handle errors appropriately.\n\n---\n\n## 4. Error Handling and Retry Logic\n\nThe matching process includes a robust error-handling mechanism. If the EV sends a **CM_SLAC_PARM.REQ** message and does not receive a **CM_SLAC_PARM.CNF** response within the expected time frame (governed by **TT_match_response**), it will resend the request. This retry logic continues until the EVSE is ready to respond or until the maximum retry limit is reached, as defined by **TT_matching_repetition**.\n\n### Example of Matching Process Error Handling\nIn the matching process, if the EV's low-layer communication module is awake while the EVSE's module is asleep, the EV will send the **CM_SLAC_PARM.REQ** message immediately after the cable is plugged in. If the EVSE is not ready to respond, it will not send a confirmation. Once the EVSE's low-layer communication module is ready, it will send the **CM_SLAC_PARM.CNF** message to the EV.\n\n---\n\n## 5. Summary\n\nThe **CM_SLAC_PARM.REQ** message is a critical component of the SLAC matching process, facilitating the exchange of parameters necessary for establishing a communication link between an EV and an EVSE. The process is characterized by specific timing constraints and error-handling protocols, ensuring reliable communication and efficient handling of potential issues during the matching sequence. The successful exchange of this message and its corresponding confirmation is essential for the subsequent stages of the SLAC process, ultimately leading to a matched state between the EV and EVSE.",
    "What is Logical Network?": "# Overview\n\nA **Logical Network** refers to a set of low-layer communication stations that utilize the same network key, allowing members of the same logical network to exchange encrypted payload data and be visible to each other on higher layers. This concept is particularly relevant in the context of Vehicle-to-Grid (V2G) communication, where different logical networks can coexist on the same physical media, typically for the purpose of network segmentation.\n\n## Definition and Characteristics\n\n- **Set of Low-Layer Communication Stations**: A logical network consists of communication stations that share a common network key, enabling secure communication among them.\n  \n- **Visibility and Data Exchange**: Only members of the same logical network can exchange encrypted payload data and are visible to each other at higher layers. This ensures that data remains secure and confined within the designated network.\n\n- **Network Segmentation**: Different logical networks can operate simultaneously on the same physical medium, which is useful for segmenting traffic and managing communication effectively.\n\n- **Layer Definition**: A logical network is specifically defined for Layer 2 of the OSI model, which pertains to the Data Link layer.\n\n## Configuration and Management\n\n### Joining and Leaving the Logical Network\n\n- **Joining Process**: To join a logical network, an Electric Vehicle (EV) requests parameters from the selected Electric Vehicle Supply Equipment (EVSE) using the message `CM_SLAC_MATCH.REQ`. The EVSE responds with a confirmation message `CM_SLAC_MATCH.CNF`, which contains the necessary parameters for the EV to join the logical network.\n\n- **Leaving the Logical Network**: When a communication node leaves the logical network, it must inform the higher layer entity through the `D-LINK_READY.indication` message, indicating that there is no longer a link.\n\n### Network Key Management\n\n- **Network Master Key (NMK)**: The NMK is crucial for defining the logical network. It should be set to a random value to ensure uniqueness whenever an EVSE switches to a private logical network. The NMK configuration can be done by sending a `CM_SLAC_MATCH.CNF` message or at any time before the matching process begins.\n\n- **Network Identifier (NID)**: The NID of the logical network is derived from the NMK, ensuring that each logical network is uniquely identifiable.\n\n## Timing and Constants\n\nAll low-layer communication devices must comply with specific timing and constant values as outlined in Table 3. These parameters are essential for ensuring proper synchronization and operation within the logical network.\n\n### Key Timing Parameters\n\n- **TP_match_leave**: Maximum time allowed to leave the logical network is set to 1 second.\n- **C_conn_max_match**: Number of retries for the matching process is set to a maximum of 3.\n- **T_conn_max_comm**: Time after plug-in until the low-layer communication module is ready for communication is set to a maximum of 8 seconds.\n\n## Related Processes\n\n### Sequence Chart of Joining the Logical Network\n\nThe process of joining a logical network is illustrated in **Figure A.7**, which provides a sequence chart detailing the steps involved in the matching process between the EV and EVSE.\n\n### Timing Constraints and Error Handling\n\n**Figure A.9.5.3** outlines the timing constraints and error handling mechanisms that are integral to the operation of logical networks within the V2G communication framework.\n\n---\n\nThis structured overview of the logical network concept within the context of V2G communication highlights its definition, characteristics, configuration requirements, and related processes, ensuring a comprehensive understanding of its role in facilitating secure and efficient communication between electric vehicles and charging infrastructure.",
    "What is the difference between MTC and PTC?": "# Overview\n\nThe terms MTC (Main Test Component) and PTC (Parallel Test Component) refer to specific components used in the context of testing the Vehicle-to-Grid (V2G) communication interface as defined in the ISO 15118 standards. These components play distinct roles in the testing framework, particularly in the execution of test cases for Electric Vehicle Supply Equipment (EVSE) and Electric Vehicle Communication Controllers (EVCC).\n\n## MTC (Main Test Component)\n\nThe MTC serves as the primary component in the testing configuration. It is responsible for creating and controlling parallel test components (PTCs) and computing and assigning the test verdict. The MTC is integral to the test execution process and always contains a TTCN-3 test configuration, which delineates the lifeline during test execution. \n\n### Key Characteristics of MTC:\n- **Type**: The MTC can be either an EVCC_Tester or SECC_Tester, depending on the type of System Under Test (SUT).\n- **Functionality**: It manages the overall test execution, including the coordination of PTCs and the handling of communication through defined ports.\n- **Port Mappings**: The MTC has specific ports mapped to the Test System Interface (TSI) for communication purposes, including:\n  - `pt_SLAC_Port`\n  - `pt_HAL_61851_Port`\n  - `pt_HAL_61851_Internal_Port` (not mapped to TSI but connects MTC and PTC).\n\n## PTC (Parallel Test Component)\n\nThe PTC is a component created by the MTC to handle specific testing tasks in parallel. It continuously observes protocol-specific parameters during the execution of test cases, ensuring compliance with the defined standards.\n\n### Key Characteristics of PTC:\n- **Functionality**: The PTC is responsible for monitoring parameters such as positive voltage, frequency, duty cycle, and proximity resistor value in accordance with IEC 61851-1 standards during the entire test case execution.\n- **Integration**: The PTC interacts with the MTC through the internal port `pt_HAL_61851_Internal_Port`, facilitating communication and synchronization of test activities.\n\n## Configuration Requirements\n\nThe configuration of MTC and PTC is crucial for the successful execution of test cases. The following points summarize the configuration requirements:\n\n- **Test System Interface (TSI)**: The TSI is an abstract component that provides a mapping of the ports available in the TTCN-3 test system to those offered by a real test system. It has no local timers, constants, or variables, only ports assigned to it.\n- **Dynamic Port Mapping**: During test case execution, the ports of test components can be dynamically mapped to the TSI ports to establish a communication channel with the real test system interface.\n- **Component Types**: The type of the TSI used depends on the SUT:\n  - If the SUT is an EVCC, the TSI uses the type `System_EVCC`.\n  - If the SUT is an SECC, the TSI uses the type `System_SECC`.\n\n## Summary of Components and Ports\n\n### Table 4 \u2014 Component Definitions\n| Component Type      | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| SECC_Tester (MTC)   | Main type for tests of an SECC, with assigned ports for communication.     |\n| EVCC_Tester (MTC)   | Main type for tests of an EVCC, with assigned ports for communication.     |\n| HAL_61851_Listener (PTC) | Monitors IEC 61851 behavior, using specific ports for communication. |\n\n### Table 5 \u2014 Port Type Definitions\n| Port Type               | Description                                                                 |\n|-------------------------|-----------------------------------------------------------------------------|\n| SLAC_Port               | Used to send/receive SLAC messages defined in ISO 15118-3.                |\n| HAL_61851_Port          | Interacts with an IEC 61851 signaling unit.                                 |\n| HAL_61851_Internal_Port  | Synchronizes the status of the IEC 61851-1 PWM signal between MTC and PTC.|\n\n## Conclusion\n\nIn summary, the MTC and PTC are essential components in the testing framework for V2G communication interfaces, each serving distinct roles in managing and executing test cases. The MTC oversees the overall testing process, while the PTC focuses on monitoring specific protocol parameters, ensuring compliance with the relevant standards. Proper configuration and integration of these components are critical for effective testing of EVSE and EVCC systems.",
    "What is CM_SLAC_MATCH.REQ?": "# Overview\n\n**CM_SLAC_MATCH.REQ** is a message used in the context of the Signal-Level Attenuation Characterization (SLAC) process, which is part of the communication protocol between Electric Vehicles (EVs) and Electric Vehicle Supply Equipment (EVSE). This message is sent by the low-layer communication module on the EV side to finalize the matching process after determining the appropriate EVSE based on signal strength measurements. The message includes critical identifiers and parameters necessary for establishing a secure connection between the EV and the EVSE.\n\n# Message Structure\n\n## CM_SLAC_MATCH.REQ Parameters\n\nThe **CM_SLAC_MATCH.REQ** message consists of several fields, each serving a specific purpose:\n\n| Field Name         | Octet No. | Field Size (Octets) | Value   | Definition                                                                 |\n|--------------------|-----------|----------------------|---------|-----------------------------------------------------------------------------|\n| APPLICATION_TYPE    | 0         | 1                    | 0x00    | Fixed value indicating \u201cPEV-EVSE matching\u201d                                  |\n| SECURITY_TYPE       | 1         | 1                    | 0x00    | Fixed value indicating \u201cNo Security\u201d                                       |\n| MVFLength            | 2 to 3    | 2                    | 0x3e    | Fixed value for matching                                                    |\n| PEV ID               | 4 to 21   | 17                   | 0x00    | Identifier for the Plug-in Electric Vehicle (PEV)                          |\n| PEV MAC              | 21 to 26  | 6                    |         | MAC address of the EV Host                                                 |\n| EVSE ID              | 26 to 43  | 17                   | 0x00    | Identifier for the Electric Vehicle Supply Equipment (EVSE)                |\n| EVSE MAC             | 44 to 49  | 6                    |         | MAC address of the EVSE Host                                               |\n| RunID                | 50 to 57  | 8                    | variable| This value must match the one sent in the CM_SLAC_PARM.REQ message by the EV |\n| RSVD                 | 58 to 65  | 8                    | 0x00    | Reserved for future use                                                    |\n\n# Related Processes\n\n## Matching Process Overview\n\nThe matching process involves several steps, including signal strength measurement and validation. The **CM_SLAC_MATCH.REQ** message is sent after the EV has determined the appropriate EVSE based on the results of the SLAC process. The EV's decision is based on the signal attenuation measured during the communication.\n\n### Signal Strength Measurement\n\n1. **Attenuation Measurement**: The EV measures the signal strength from potential EVSEs using M-Sound messages and reports the results back to the EV.\n2. **Decision Making**: Based on the received signal strength, the EV determines the status of the EVSE:\n   - **EVSE_FOUND**: The EV has identified the EVSE without any doubt.\n   - **EVSE_POTENTIALLY_FOUND**: The EV has identified one or more EVSEs, and further validation is needed.\n   - **EVSE_NOT_FOUND**: No directly connected EVSE is found, and the matching process is considered failed.\n\n### Message Flow After Signal Measurement\n\n- If the EV determines that the EVSE is found, it continues the message flow by sending the **CM_SLAC_MATCH.REQ**.\n- If the EVSE receives a **CM_SLAC_MATCH.REQ** with invalid content, it will ignore the message.\n- If the EVSE receives the **CM_SLAC_MATCH.REQ** again, it indicates that the EV is retransmitting the request, possibly due to not receiving the **CM_SLAC_MATCH.CNF** response.\n\n## Timing Constraints\n\nThe matching process is governed by several timing parameters, which ensure that the communication occurs within specified time limits. For example:\n\n- **TT_EVSE_match_session**: Maximum time from the expiration of the matching process to the reception of either **CM_VALIDATE.REQ** or **CM_SLAC_MATCH.REQ**.\n- **TT_match_response**: Time that the EV/EVSE shall wait for a response from the EVSE/EV.\n\nThese timing constraints are critical for maintaining the efficiency and reliability of the matching process.\n\n# Conclusion\n\nThe **CM_SLAC_MATCH.REQ** message plays a vital role in the SLAC process, enabling the EV to finalize its connection with the appropriate EVSE based on signal strength measurements. The structured parameters within the message ensure that both the EV and EVSE can establish a secure and effective communication link, facilitating the vehicle-to-grid interaction necessary for modern electric vehicle charging systems.",
    "What is TSS?": "# Overview\n\nThe Test Suite Structure (TSS) is a comprehensive framework designed for conformance testing of systems under test (SUT) in the context of the ISO 15118 standards, specifically focusing on the physical and data link layer requirements for vehicle-to-grid (V2G) communication. It encompasses a complete set of test cases, organized into groups or modules, that are essential for validating the compliance of electric vehicle (EV) communication systems with established protocols.\n\n## Test Suite Structure (TSS)\n\n### Definition and Purpose\nA test suite is defined as a complete set of test cases, potentially grouped into modules based on specific use cases or domains, such as AC and DC charging. These test cases are necessary for performing conformance testing for a given SUT. Each test case involves stimulating the SUT with specific inputs and observing the reactions, which are then evaluated against expected outcomes.\n\n### Test Case Composition\nEach test case is composed of:\n- **Pre-conditions**: Conditions that must be met before the test is executed.\n- **Post-conditions**: Conditions that must be verified after the test execution.\n- **Test behaviors**: The actual actions taken during the test.\n\nThese elements are encapsulated into individual functions and stored within separate modules, allowing for a structured approach to testing.\n\n### Hierarchical Structure\nThe TSS is organized into a hierarchical structure, with test cases defined at the second level. The grouping of functions corresponds to the lowest abstract hierarchical level, as illustrated in Figure 2.\n\n## Test Profiles\n\n### Overview\nTest profiles are defined to ensure conformance with ISO 15118-3. A test profile includes:\n- **Test configuration**: Specifies the setup for the tests.\n- **Selection and assignment of PICS/PIXIT**: These are essential for representing a given use case.\n\n### Components of a Test Profile\n- **Test components and ports**: Defined based on the test configuration.\n- **Test group**: Specifies the relevant test cases and the sequence in which they are executed to perform a conformance test for a specific use case.\n\n## Related Topics\n\n### Test Case Behavior\nIn each test case, the SUT is stimulated with specific inputs, and the reactions are observed and evaluated. The formulation of test behavior considers different pre-conditions and post-conditions, which are essential for accurate testing.\n\n### Grouping of Functions\nThe grouping of functions within the TSS allows for organized management of test cases, ensuring that each function is appropriately categorized according to its role in the testing process.\n\n### Identifiers within the Test Suite Structure\nTable 1 outlines the identifiers used within the TSS, which include:\n- **System under Test (SUT)**: Identified as either EVCC (Electric Vehicle Communication Controller) or SECC (Supply Equipment Communication Controller).\n- **Domain identifiers**: Such as AC, DC, IN (Inductive), and CMN (Common behaviors), which categorize specific behaviors relevant to the testing context.\n\n### Annexes Description\nTable 2 describes the annexes derived for the TSS, which include:\n- **Configuration Annex (Annex A)**: Contains constant definitions, timers, PICS, and PIXIT definitions.\n- **Control Part Annex (Annex B)**: Describes the execution order of modeled test cases.\n- **Test Cases Annex (Annex C)**: Contains the TTCN-3 test case files for both EVCC and SECC.\n- **Functions Annexes (Annex D - E)**: Include methods for supporting test execution, pre-conditions, post-conditions, and test behaviors.\n- **Templates Annex (Annex F)**: Contains TTCN-3 template files for matching SUT reactions against expected behaviors.\n- **Data Structures Annex (Annex G)**: Contains data structures necessary for testing SLAC.\n\n## Conclusion\nThe Test Suite Structure (TSS) provides a well-defined framework for conducting conformance testing of vehicle-to-grid communication systems, ensuring that all necessary test cases and configurations are systematically organized and executed. This structured approach facilitates the validation of compliance with ISO 15118 standards, promoting interoperability and reliability in electric vehicle communication systems.",
    "What is CM_SLAC_MATCH.CNF?": "# Overview\n\n**CM_SLAC_MATCH.CNF** is a confirmation message used in the matching process between an Electric Vehicle (EV) and an Electric Vehicle Supply Equipment (EVSE) during the establishment of a communication link. This message is part of the Signal-Level Attenuation Characterization (SLAC) process, which ensures that the EV is correctly matched to the appropriate EVSE before initiating a charging session. The confirmation message contains critical parameters that facilitate the configuration of the low-layer communication module on the EV side.\n\n## Related Topics\n\n### Matching Process Overview\nThe matching process is a crucial step in the Vehicle-to-Grid (V2G) communication framework, specifically designed to ensure that the EV and EVSE can communicate effectively. The process involves several message exchanges, including the initial parameter request (CM_SLAC_PARM.REQ), attenuation measurements, and the final matching confirmation (CM_SLAC_MATCH.CNF).\n\n### Message Definitions\nThe **CM_SLAC_MATCH.CNF** message is defined in the context of the SLAC process, which includes the following key parameters:\n\n- **APPLICATION_TYPE**: Fixed value indicating \u201cPEV-EVSE matching.\u201d\n- **SECURITY_TYPE**: Fixed value indicating \u201cNo Security.\u201d\n- **MVFLength**: Fixed value for matching.\n- **PEV ID**: Identifier for the EV.\n- **PEV MAC**: MAC address of the EV Host.\n- **EVSE ID**: Identifier for the EVSE.\n- **EVSE MAC**: MAC address of the EVSE Host.\n- **RunID**: A unique identifier that must match the one sent in the CM_SLAC_PARM.REQ message.\n- **NID**: Network ID derived from the Network Membership Key (NMK).\n- **NMK**: Private NMK of the EVSE, which is a random value used for secure communication.\n\n### Confirmation Handling\nUpon receiving the **CM_SLAC_MATCH.CNF** message, the EV must validate the content. If the content deviates from the expected definitions, it is ignored. If the link is not established within the maximum time defined by the timer **TT_match_join** after receiving the confirmation, the EV considers the matching process as failed.\n\n### Timing and Constants\nThe timing parameters associated with the matching process are critical for ensuring timely communication and response. Key timers include:\n\n- **TT_match_join**: Maximum time allowed between receiving the CM_SLAC_MATCH.CNF and establishing a link. If this time expires without a link, the matching process is deemed failed.\n- **TT_match_response**: Time the EV/EVSE waits for a response after sending a request.\n- **TP_EV_SLAC_init**: Time allowed for the EV to initiate the matching process after detecting a connection.\n\n## Related Primitives\n\n### CM_SLAC_MATCH Messages\n- **CM_SLAC_MATCH.REQ**: The request message sent by the EV to initiate the matching process.\n- **CM_SLAC_MATCH.CNF**: The confirmation message sent by the EVSE in response to the matching request.\n\n### Other Related Messages\n- **CM_SLAC_PARM.REQ**: The initial request message sent by the EV to announce its parameters to potential EVSE nodes.\n- **CM_SLAC_PARM.CNF**: The confirmation message from the EVSE that includes details necessary for the matching process.\n\n## Configuration Requirements\nAfter receiving the **CM_SLAC_MATCH.CNF**, the EV is required to configure its low-layer communication module using the parameters provided in the message. This is typically done through the **CM_SET_KEY.REQ** message, which sets the necessary keys for secure communication.\n\n### Handling Invalid Content\nIf the EV receives a **CM_SLAC_MATCH.CNF** with invalid content, it must ignore the message. The EV should also be prepared to handle scenarios where no valid confirmation is received within the expected time frame, leading to a retry or failure of the matching process.\n\n## Conclusion\nThe **CM_SLAC_MATCH.CNF** message plays a vital role in the SLAC matching process, ensuring that the EV and EVSE can establish a secure and effective communication link. Proper handling of this message, along with adherence to timing constraints and message definitions, is essential for successful V2G communication.",
    "What is CM_SET_KEY.REQ?": "# Overview\n\n**CM_SET_KEY.REQ** is a request message used in the context of configuring the low-layer communication module of Electric Vehicle Supply Equipment (EVSE) during the matching process with an electric vehicle (EV). This message is crucial for establishing secure communication parameters, specifically the Network Identifier (NID) and Network Master Key (NMK), which are essential for the Vehicle-to-Grid (V2G) communication process.\n\n---\n\n## Related Topics\n\n### Context of Use\nThe **CM_SET_KEY.REQ** message is sent by the EVSE after it has received a confirmation message (CM_SLAC_MATCH.CNF) containing the NID and NMK values. This configuration can occur at any time, including after the unplugging of a previous EV. The message is part of the process to ensure that the EVSE is properly set up to communicate with the EV in a secure manner.\n\n### Timing and Error Handling\nThe EVSE initiates a timer (TT_match_join) after sending the CM_SLAC_MATCH.CNF. This timer is critical as it determines the maximum time allowed for establishing a link in the logical network. If the link is not detected before the timer expires, the matching process is considered failed.\n\n---\n\n## Configuration Requirements\n\n### Message Structure\nThe **CM_SET_KEY.REQ** message is structured as follows, as defined in Table A.8:\n\n| Field                | Octet No. | Field Size (octets) | Value                | Definition                                      |\n|----------------------|-----------|----------------------|----------------------|-------------------------------------------------|\n| Key Type             | 0         | 1                    | 0x01                 | Fixed value to indicate \u201cNMK\u201d                   |\n| My Nonce             | 1 to 4    | 4                    | 0x00000000           | Fixed value, encrypted payload not used         |\n| Your Nonce           | 5 to 8    | 4                    | 0x00000000           | Fixed value, encrypted payload not used         |\n| PID                  | 9         | 1                    | 0x04                 | Fixed value to indicate \u201cHLE protocol\u201d          |\n| PRN                  | 10 to 11  | 2                    | 0x0000               | Fixed value, encrypted payload not used         |\n| PMN                  | 12        | 1                    | 0x00                 | Fixed value, encrypted payload not used         |\n| CCo Capability       | 13        | 1                    | variable             | CCo Capability according to the station role    |\n| NID                  | 14 to 20  | 7                    | variable             | 54 LSBs contain the NID, 2 MSBs = 0b00         |\n| NewEKS               | 21        | 1                    | 0x01                 | Fixed value to indicate \u201cNMK\u201d                   |\n| NewKey               | 22 to 37  | 16                   | variable             | NMK                                             |\n\n### Related Messages\nThe **CM_SET_KEY.REQ** is part of a sequence of messages that facilitate the matching process between the EV and EVSE. It is essential for ensuring that both parties have the correct configuration to establish a secure communication link.\n\n---\n\n## Timing Constraints\n\nThe timing constraints associated with the matching process are summarized in Table A.1, which outlines various parameters that govern the timing of messages and responses during the EV and EVSE interaction. Key parameters include:\n\n- **TT_match_join**: Maximum time between CM_SLAC_MATCH.CNF and link establishment. If no link is detected after this timeout, the EV retries the matching process.\n- **TT_match_response**: Time that the EV/EVSE shall wait for a response from the EVSE/EV.\n- **TT_match_sequence**: Time that the EVSE/EV shall wait for a request from the EV/EVSE.\n\nThese timing parameters are critical for ensuring that the communication process is efficient and that both the EV and EVSE can respond appropriately to each other's messages.\n\n---\n\n## Conclusion\n\nThe **CM_SET_KEY.REQ** message plays a vital role in the configuration of low-layer communication for V2G interactions. By establishing secure parameters such as the NID and NMK, it ensures that the EVSE can effectively communicate with the EV, facilitating a successful matching process. Understanding the structure and timing of this message is essential for engineers and developers working within the V2G framework.",
    "What is CM_ATTEN_CHAR.IND?": "# Overview\n\n**CM_ATTEN_CHAR.IND** is a message used in the context of signal strength measurement between Electric Vehicles (EVs) and Electric Vehicle Supply Equipment (EVSEs). This message is part of the process that allows the EV to determine which EVSE nodes are available for connection based on the attenuation of the signal received from the EV. The CM_ATTEN_CHAR.IND message contains the calculated signal strength, which is essential for the matching process between the EV and the EVSE.\n\n# Signal Strength Measurement Process\n\n## Purpose of CM_ATTEN_CHAR.IND\nThe **CM_ATTEN_CHAR.IND** message is utilized by potential EVSEs to report the signal strength back to the EV after measuring the attenuation of the signal coming from the EV. This measurement is crucial for the EV to identify which EVSE it can connect to directly.\n\n## Calculation of ATTEN_PROFILE\nThe **ATTEN_PROFILE** within the CM_ATTEN_CHAR.IND message is calculated as follows:\n- It is derived from the arithmetic mean of the ATTEN_PROFILE values from the CM_ATTEN_PROFILE.IND messages received during previous M-SOUNDS.\n- The calculation is corrected by the attenuation of the receive path (AttnRx-EVSE) as specified in A.9.4.1.\n\n## Average_Attenuation Calculation\nThe **Average_Attenuation** used for the matching decision is calculated by:\n- Taking the arithmetic mean of all groups in the CM_ATTEN_CHAR.IND message.\n- A weighted average may be used to account for implementation specifics, ensuring that the sum of the weights of all groups equals one.\n\n# Message Flow and Response\n\n## Sending and Receiving Messages\n1. After the parameter exchange, the EV initiates the signal strength measurement process by sending the **CM_START_ATTEN_CHAR.IND** message multiple times, followed by a series of M-SOUNDS.\n2. Each potential EVSE calculates the signal strength and responds with the **CM_ATTEN_CHAR.IND** message.\n3. The EV confirms receipt of each CM_ATTEN_CHAR.IND with an individual **CM_ATTEN_CHAR.RSP** message.\n\n## Handling of CM_ATTEN_CHAR.IND\n- If the **NUM_SOUNDS** field in a CM_ATTEN_CHAR.IND message is zero, the ATTEN_PROFILE is deemed insignificant, and the message is ignored.\n- If the EV receives a CM_ATTEN_CHAR.IND with invalid content, it shall also be ignored.\n- If the message originates from an EVSE that has not sent a **CM_SLAC_PARM.CNF** before, the message will be processed.\n\n# Matching Process Outcomes\n\nThe outcome of the matching process is determined based on the signal strength measurements and is categorized into three statuses:\n1. **EVSE_FOUND**: The EVSE is identified without any doubt.\n2. **EVSE_POTENTIALLY_FOUND**: One or several EVSEs are identified, and further matching will determine the most probable candidate.\n3. **EVSE_NOT_FOUND**: No directly connected EVSE is found.\n\nThe EV sets the **EV_Discovering_Status** according to the results of the SLAC process and the signal attenuation read from the CM_ATTEN_CHAR.IND message.\n\n# Timings and Constants\n\nThe process involves several timing parameters that govern the interactions between the EV and EVSE:\n- **TT_EV_atten_results**: The time the EV waits for CM_ATTEN_CHAR.IND messages from EVSEs, starting with the first CM_START_ATTEN_CHAR.IND message.\n- **TT_match_response**: The time that the EV/EVSE shall wait for a response from the EVSE/EV.\n- **TP_EV_batch_msg_interval**: The interval between consecutive CM_START_ATTEN_CHAR.IND or CM_MNBC_SOUND.IND messages.\n\nThese timings ensure that the communication process is efficient and that both the EV and EVSE can manage their respective states during the matching process.\n\n# Conclusion\n\nThe **CM_ATTEN_CHAR.IND** message plays a critical role in the signal strength measurement and matching process between EVs and EVSEs. By accurately reporting signal strength and attenuation, it enables the EV to make informed decisions about which EVSE to connect to, thereby facilitating effective vehicle-to-grid communication.",
    "What is CM_ ATTEN_CHAR.RSP?": "# Overview\n\n**CM_ATTEN_CHAR.RSP** is a response message used in the context of signal strength measurement between an Electric Vehicle (EV) and an Electric Vehicle Supply Equipment (EVSE). This message is part of the communication protocol that allows the EV to confirm the reception of signal strength measurements sent by the EVSE, which are transmitted via the **CM_ATTEN_CHAR.IND** message. The purpose of this exchange is to facilitate the matching process between the EV and the EVSE, ensuring that the EV can identify the appropriate charging station to connect to based on signal strength.\n\n# Signal Strength Measurement Process\n\n## Functional Description\n\nThe signal strength measurement process is crucial for determining the availability of EVSE nodes and identifying the correct one for connection. The process involves the following steps:\n\n1. **Initiation**: The EV starts the signal strength measurement by sending a specified number of **CM_START_ATTEN_CHAR.IND** messages, followed by a number of M-SOUNDS.\n2. **Signal Measurement**: All potential EVSEs calculate the signal strength based on the attenuation of the signal received from the EV across different frequency groups. They report this measurement back to the EV using the **CM_ATTEN_CHAR.IND** message.\n3. **Response Confirmation**: Each **CM_ATTEN_CHAR.IND** message sent by the EVSE is confirmed by the EV with an individual **CM_ATTEN_CHAR.RSP** message.\n\n## Matching Process\n\nThe matching process is defined by the following statuses based on the signal strength measurements:\n\n- **EVSE_FOUND**: The EV has identified the EVSE without any doubt.\n- **EVSE_POTENTIALLY_FOUND**: One or several EVSEs are identified, and further steps are needed to confirm the most probable candidate.\n- **EVSE_NOT_FOUND**: No directly connected EVSE is found, and the matching process is considered failed.\n\nThe EV uses the results from the SLAC (Service Layer Authentication and Control) process to determine the appropriate status and continue the communication flow accordingly.\n\n## Invalid Content Handling\n\nIf the EV receives a **CM_ATTEN_CHAR.RSP** message with invalid content, it is to be ignored. Invalid content is defined as any deviation from the Multi-Media Exchange (MME) definition specified in Table A.4.\n\n# Related Topics\n\n## Signal Strength Measurement Method\n\nThe signal strength measurement method utilized is the SLAC, as defined in the HomePlug Green PHY (HPGP) specifications. This method ensures that the communication between the EV and EVSE is standardized and reliable.\n\n## Timing and Constants\n\nThe timing and constants relevant to the signal strength measurement process are summarized in the following tables:\n\n### Table A.1 \u2014 Timing and Constant Values\n\n| Parameter                       | Description                                           | Min | Typical | Max | Unit |\n|---------------------------------|-------------------------------------------------------|-----|---------|-----|------|\n| C_EV_match_MNBC                 | Number of M-Sounds sent for the SLAC                  |     | 10      |     | nbr  |\n| C_EV_match_retry                | Number of retries of the corresponding message        |     |         | 2   | nbr  |\n| C_EV_match_signalattn_direct    | Lower threshold for the signal strength measurement    |     | 10      |     | dB   |\n| C_EV_match_signalattn_indirect   | Higher threshold for the signal strength measurement   |     | 20      |     | dB   |\n| C_EV_start_atten_char_inds      | Number of CM_START_ATTEN_CHAR.INDs sent by the EV     |     | 3       |     | nbr  |\n| TP_EV_match_session              | Performance time for the EV to start validation       |     |         | 500 | ms   |\n| TT_EV_atten_results              | Time the EV shall wait for CM_ATTEN_CHAR.IND messages |     |         | 1200| ms   |\n\n### Table A.3 \u2014 EV_Discovering_Status Definition\n\n| Status                     | Average_Attenuation From | Average_Attenuation To | Description                                           |\n|---------------------------|--------------------------|------------------------|-------------------------------------------------------|\n| EVSE_FOUND                | -                        | C_EV_match_signal-attn_direct | The EVSE is identified without any doubt.             |\n| EVSE_POTENTIALLY_FOUND    | C_EV_match_signal-attn_direct | C_EV_match_signal-attn_indirect | One or several EVSEs are identified.                  |\n| EVSE_NOT_FOUND            | C_EV_match_signal-attn_indirect | -                      | No direct connected EVSE is found.                    |\n\n# Conclusion\n\nThe **CM_ATTEN_CHAR.RSP** message plays a critical role in the communication between EVs and EVSEs during the signal strength measurement process. By confirming the reception of signal strength data, it facilitates the identification and matching of EVSEs, ensuring a reliable connection for electric vehicle charging. The structured approach to signal strength measurement, including defined statuses and timing parameters, enhances the interoperability and efficiency of the Vehicle-to-Grid (V2G) communication framework.",
    "What is EIM?": "# Overview\n\nEIM, or External Identification Means, is a method used in Electric Vehicle Supply Equipment (EVSE) to authenticate and authorize electric vehicles (EVs) for charging. It is part of the broader context of vehicle-to-grid (V2G) communication, which allows for efficient energy management and charging processes. EIM can be used alongside Plug & Charge (PnC) to facilitate the identification of the user or vehicle, ensuring secure and streamlined charging sessions.\n\n## Related Topics\n\n### Connection Coordination in EVSEs\n\nThe connection coordination process in EVSEs involves various states and transitions that occur when an EV is plugged in. The following figures illustrate different scenarios of how EIM and PnC are implemented in AC and DC EVSEs:\n\n- **Figure 3**: Shows an AC EVSE supporting High-Level Communication Control (HLC-C) with PnC and EIM. The matching process is not started when EIM is done, and the EVSE applies a 5% control pilot duty cycle after plug-in.\n- **Figure 4**: Similar to Figure 3 but indicates that the matching process is not started when EIM is done, and the EVSE applies control pilot state X1 after plug-in.\n- **Figure 5**: Depicts an AC EVSE where the matching process is already started when EIM is done, applying a 5% control pilot duty cycle after plug-in.\n- **Figure 6**: Similar to Figure 5 but shows the matching process started with control pilot state X1 after plug-in.\n- **Figure 7**: Illustrates an AC EVSE where EIM is done before plug-in.\n- **Figure 8**: Displays a DC EVSE supporting HLC-C with PnC and EIM, showing three branches for different scenarios of EIM and PnC.\n- **Figure 9**: Focuses on AC EVSE timeout handling for a 5% control pilot duty cycle.\n\n### Control Pilot States\n\nControl pilot states are crucial for managing the communication between the EV and EVSE. The following states are defined:\n\n1. **X1 or X2 (5%)**: Indicates the control pilot state immediately after plug-in, where the EVSE may apply either state.\n2. **X2 (5% or nominal)**: Represents the state where the control pilot is stabilized at a 5% duty cycle or nominal duty cycle.\n3. **E/F (0%)**: Indicates an error or fault state, typically used for error handling.\n4. **T_step_EF**: The duration the system remains in the E/F state before transitioning back to a normal control pilot state.\n\n### Charging Modes\n\nThe EVSE can operate under different charging modes based on the capabilities of the EV and the EVSE:\n\n- **PnC (Plug and Charge)**: An automatic method for authorization and matching using high-level communication.\n- **EIM with BC (Basic Charging)**: Charging controlled by IEC 61851-1 signals after successful EIM.\n- **EIM without BC**: Charging controlled by high-level communication without falling back to basic charging.\n- **[IEC-1] Charging**: Basic charging mode for EVs that do not support high-level communication.\n\n### Matching Process\n\nThe matching process is essential for establishing a secure connection between the EV and EVSE. It involves:\n\n1. **Discovery of Communication Nodes**: The EV identifies all EVSEs connected to the pilot line.\n2. **Signal Strength Measurement**: The EV measures the strength of signals from discovered EVSEs.\n3. **Validation of Matching Decision**: The EV may perform additional validation to confirm the connection to the correct EVSE.\n\n### Notes on EIM and PnC\n\n- **EIM**: Can be performed before or after the plug-in event, depending on the configuration of the EVSE.\n- **PnC**: Requires that the EV supports automatic identification and authorization through high-level communication.\n\n## Configuration Requirements\n\n### Control Pilot Requirements\n\nThe control pilot must adhere to specific requirements as defined in the standards:\n\n- The EVSE shall signal control pilot state E/F for T_step_EF if no matching process is running after EIM.\n- The transition from a 5% control pilot duty cycle to a nominal duty cycle must follow a specific sequence to ensure backward compatibility.\n\n### Component Values\n\nFor the implementation of EIM and PnC, certain component values are mandatory:\n\n- **Inductors**: Lx1, Lx2 = 1,000 \u00b5H\n- **Resistors**: Rx1, Rx2 = 680 \u03a9\n- **Capacitors**: Cx1, Cx2 = 500 pF\n\nThese values ensure compliance with the standards and proper functionality of the EVSE.\n\n## Conclusion\n\nEIM plays a critical role in the charging process of electric vehicles, allowing for secure identification and authorization. The connection coordination process, control pilot states, and various charging modes are essential for ensuring efficient and reliable charging experiences. Understanding these components and their interactions is vital for engineers and implementers working with EVSE technology.",
    "What is CM_START_ATTEN_CHAR.IND?": "# Overview\n\n**CM_START_ATTEN_CHAR.IND** is a message used in the context of the Signal-Level Attenuation Characterization (SLAC) process, which is part of the communication between Electric Vehicles (EVs) and Electric Vehicle Supply Equipment (EVSE). This message initiates the signal strength measurement process, allowing the EV to determine the available EVSE nodes and their respective signal strengths. The process involves sending multiple instances of this message followed by M-SOUNDS to facilitate the calculation of signal strength by the EVSE.\n\n# Related Topics\n\n## Signal Strength Measurement Process\n\nThe signal strength measurement process is crucial for the EV to identify which EVSE nodes are available for connection. The process involves the following steps:\n\n1. **Signal Attenuation Measurement**: The EV measures the attenuation of the signal coming from the EVSE for different frequency groups and reports the signal strength back to the EV.\n2. **Sending CM_START_ATTEN_CHAR.IND**: After the parameter exchange, the EV sends the **CM_START_ATTEN_CHAR.IND** message a specified number of times (C_EV_start_atten_char_inds) to initiate the signal strength measurement.\n3. **M-SOUNDS Transmission**: Following the **CM_START_ATTEN_CHAR.IND** messages, the EV sends a number of M-SOUNDS (C_EV_match_MNBC) to allow potential EVSEs to calculate the signal strength.\n4. **Response from EVSE**: The EVSE calculates the signal strength based on the M-SOUNDS and sends back the measurement results using the **CM_ATTEN_CHAR.IND** message. Each of these messages is confirmed by the EV with an individual **CM_ATTEN_CHAR.RSP**.\n\n## Message Structure\n\nThe **CM_START_ATTEN_CHAR.IND** message is defined in Table A.4, which outlines the parameters and their respective definitions. Below is a summary of the fields included in this message:\n\n| Field                | Octet No. | Field Size (Octets) | Value | Definition |\n|----------------------|-----------|----------------------|-------|------------|\n| APPLICATION_TYPE     | 0         | 1                    | 0x00  | Fixed value indicating \u201cPEV-EVSE Matching\u201d |\n| SECURITY_TYPE        | 1         | 1                    | 0x00  | Fixed value indicating \u201cNo Security\u201d |\n| NUM_SOUNDS           | 2         | 1                    | C_EV_match_MNBC | Number of M-Sounds transmitted by the GP station during the SLAC process |\n| Time_Out             | 3         | 1                    | TT_EVSE_match_MNBC | Max. time window within the M-Sounds are sent |\n| RESP_TYPE            | 4         | 1                    | 0x01  | Fixed value indicating \u201cother Green PHY station\u201d |\n| FORWARDING_STA       | 5 to 10   | 6                    | EV Host MAC address | The destination of SLAC results is always the EV Host |\n| RunID                | 11 to 18  | 8                    | variable | This value shall be the same as the one sent in the CM_SLAC_PARM.REQ message by the EV |\n\n## Timing and Constants\n\nThe timing parameters associated with the **CM_START_ATTEN_CHAR.IND** message are critical for ensuring the proper execution of the SLAC process. The relevant timing parameters include:\n\n- **C_EV_start_atten_char_inds**: Number of **CM_START_ATTEN_CHAR.IND** messages sent by the EV (typically set to 3).\n- **TP_EV_batch_msg_interval**: Interval between two **CM_START_ATTEN_CHAR.IND** or **CM_MNBC_SOUND.IND** messages (typically set to 20 ms).\n- **TT_EV_atten_results**: Time the EV shall wait for **CM_ATTEN_CHAR.IND** messages from EVSEs, starting with the sending of the first **CM_START_ATTEN_CHAR.IND** (typically set to 1200 ms).\n\n## Conclusion\n\nThe **CM_START_ATTEN_CHAR.IND** message plays a vital role in the SLAC process, enabling the EV to initiate signal strength measurements and facilitating the identification of available EVSE nodes. The structured approach to sending this message, along with the defined timing parameters, ensures effective communication and reliable operation within the Vehicle-to-Grid (V2G) ecosystem.",
    "What is ATS?": "# Overview\nThe Abstract Test Suite (ATS) is a structured set of tests designed to evaluate the conformance of a System Under Test (SUT) implementing the Electric Vehicle Communication Controller (EVCC) or Supply Equipment Communication Controller (SECC) according to the ISO 15118-3 standard. The ATS comprises abstract test cases that assess both the capabilities and behaviors of the SUT, ensuring that they align with the static and dynamic conformance requirements specified in the standard.\n\n# Abstract Test Suite (ATS)\n## Definition\nThe ATS is a test suite composed of abstract test cases that check the observable capabilities of the SUT against the static conformance requirements defined in ISO 15118-3. It also examines the behavior of the implementation over a range of dynamic conformance requirements.\n\n## Testing Capabilities and Behaviors\n- **Capability Tests**: These tests verify that the observable capabilities of the SUT conform to the static requirements.\n- **Behavior Tests**: These tests evaluate the implementation's behavior across the full range of dynamic requirements, ensuring practical examination of the SUT's functionality.\n\n# Protocol Implementation Conformance Statement (PICS)\n## Definition\nA Protocol Implementation Conformance Statement (PICS) is a necessary document that outlines the capabilities and options implemented in a particular system. It specifies any features that have been omitted, allowing the implementation to be tested for conformance against relevant requirements.\n\n### PICS Tables\n- **Table 6**: PICS for test system configurations CF_05_001 and CF_05_002 (SUT either SECC or EVCC).\n- **Table 7**: PICS for test system configuration CF_05_001 (SUT equals SECC).\n- **Table 8**: PICS for test system configuration CF_05_002 (SUT equals EVCC).\n\n### Example PICS Entries\n- **PICS_CMN_CMN_CombinedTesting**: Indicates enabling combined testing including SLAC association and V2G messaging.\n- **PICS_CMN_CMN_ChargingMode**: Indicates testing either AC or DC charging mode.\n\n# Protocol Implementation Extra Information for Testing (PIXIT)\n## Definition\nPIXIT provides additional information necessary for testing specific behaviors of the SUT. It indicates capabilities that are tested and ensures the testability of ISO 15118-3 requirements.\n\n### PIXIT Tables\n- **Table 9**: Selected PIXIT for test system configurations CF_05_001 and CF_05_002 (SUT either SECC or EVCC).\n- **Table 10**: Selected PIXIT for test system configuration CF_05_001 (SUT equals SECC).\n- **Table 11**: Selected PIXIT for test system configuration CF_05_002 (SUT equals EVCC).\n\n### Example PIXIT Entries\n- **PIXIT_CMN_CMN_CmAmpMap**: Indicates explicit testing of the Amplitude map process.\n- **PIXIT_SECC_CMN_CmValidate**: Indicates explicit testing of the SECC Validation process.\n\n# Test Suite Coverage\n## Coverage Conditions\nThe ATS coverage of requirements defined in ISO 15118-3 is summarized in various tables, indicating which requirements are covered, indirectly covered, partially covered, or not testable.\n\n### Coverage Tables\n- **Table 27**: Requirements of ISO 15118-3 not considered in the ATS.\n- **Table 28**: Requirements of ISO 15118-3 implicitly covered by the SUT adapters/codecs.\n- **Table 29**: ATS coverage of requirements in ISO 15118-3, detailing the relevance of requirements based on the type of SUT and charging profiles.\n\n### Coverage Symbols\n- **X**: Indicates requirements covered in the ATS with one or more test cases.\n- **I**: Indicates requirements indirectly covered in the ATS.\n- **P**: Indicates requirements partially covered by one or more test cases.\n- **N**: Indicates requirements that are not testable for the defined profile.\n- **O**: Indicates requirements that are out of scope for the defined profile.\n\n# Conclusion\nThe ATS, along with PICS and PIXIT, forms a comprehensive framework for testing the conformance of EVCC and SECC implementations to the ISO 15118-3 standard. This structured approach ensures that various capabilities and behaviors of the SUT are thoroughly evaluated, contributing to the reliability and interoperability of electric vehicle communication systems.",
    "What is CM_AMP_MAP.CNF?": "# Overview\n\n**CM_AMP_MAP.CNF** is a confirmation message used in the amplitude map exchange process within the Vehicle-to-Grid (V2G) communication framework, specifically defined in the ISO 15118 standard. This message is crucial for confirming the successful reception and processing of a transmission power limitation request sent by one device to another in a V2G context. The amplitude map exchange allows devices to negotiate and adjust their transmission power for specific carriers, ensuring compliance with local regulations and minimizing interference.\n\n# Amplitude Map Exchange Process\n\n## Functional Description\nThe amplitude map exchange is an optional function that allows one device (either the Electric Vehicle (EV) or the Electric Vehicle Supply Equipment (EVSE)) to request the counterpart low-layer communication module to reduce the transmission power for certain carriers. The requesting device sends a **CM_AMP_MAP.REQ** command, which must be confirmed by the counterpart node through a **CM_AMP_MAP.CNF** message.\n\n### Transmission Power Limitation Request\n- The transmission power limitation request is related to the Power Spectral Density (PSD) at the EVs/EVSEs socket.\n- All transmission power values within the CM_AMP_MAP Management Message Elements (MMEs) are related to a reference value of \u221250 dBm/Hz, with a resolution of \u22122 dB.\n\n## Example of Amplitude Map Exchange\n1. **Request Initiation**: The EVSE requests a limitation of the power of specific carriers (e.g., carriers 2 and 3) to a specified value (e.g., \u221278 dBm/Hz), while other carriers remain unaffected.\n2. **Message Transmission**: The EVSE sends a **CM_AMP_MAP.REQ** to the EV Host MAC address with the corresponding values.\n3. **Confirmation**: The EV Host compares the received values with its default PSD at the socket and confirms the request by sending a **CM_AMP_MAP.CNF** back to the EVSE.\n\n### Message Structure\n- **CM_AMP_MAP.REQ**:\n  - Contains fields such as AMLEN (indicating the number of carriers used) and AMDATA (which holds the amplitude map data).\n  \n- **CM_AMP_MAP.CNF**:\n  - Contains a result code indicating the success or failure of the request:\n    - `0x00` = success\n    - `0x01` = failure\n    - `0x02 \u2013 0xFF` = reserved\n\n## Timing and Constants\nThe amplitude map exchange process is governed by specific timing parameters to ensure timely communication:\n- **TP_amp_map_exchange**: Performance timer for the start of an amplitude map exchange, requiring a **CM_AMP_MAP.REQ** to be sent within a maximum value of this timer after the link is detected.\n- **TT_match_response**: General performance time for a response to a request, typically set to 100 ms.\n\n## Handling Invalid Content\nIf a low-layer communication module receives a **CM_AMP_MAP.CNF** with invalid content, it shall be ignored. Content that deviates from the MME definition is considered invalid.\n\n## Retransmission Protocol\nIf a low-layer communication module sends a **CM_AMP_MAP.REQ** but does not receive a valid **CM_AMP_MAP.CNF** within the maximum response time, it shall retransmit the request. A maximum number of retransmissions is defined to prevent indefinite waiting.\n\n# Related Topics\n- **Amplitude Map Data (AMDATA)**: The data structure that contains the amplitude map values for each carrier.\n- **Power Spectral Density (PSD)**: The reference value used for determining transmission power limits.\n- **V2G Communication Standards**: The broader context of how EVs and EVSEs communicate, including the ISO 15118 series.\n\n# Figures and Tables\n- **Figure A.8**: Sequence chart of amplitude map exchange, illustrating the flow of messages between the EV and EVSE during the amplitude map exchange process.\n- **Table A.9**: Defines the parameters for the CM_AMP_MAP messages, including the structure and expected values for both the request and confirmation messages.\n\nThis structured approach ensures that the amplitude map exchange is conducted efficiently and effectively, allowing for optimal communication between electric vehicles and charging stations while adhering to regulatory requirements.",
    "What is D-LINK_ERROR.request?": "# Overview\n\n**D-LINK_ERROR.request** is a primitive used in the context of the Vehicle-to-Grid (V2G) communication interface, specifically within the ISO 15118-3 standard. This primitive is invoked when there is a need to handle errors related to the communication link between the Electric Vehicle (EV) and the Electric Vehicle Supply Equipment (EVSE). It requests the lower layers to terminate the current data link and restart the matching process, typically triggered by a control pilot state transition through state E.\n\n---\n\n## Related Primitives\n\n### D-LINK_ERROR.request\n- **Purpose**: Requests lower layers to terminate the data link and restart the matching process.\n- **Entity to Support**: EVSE.\n- **Context**: This primitive is utilized when there is a loss of communication or an error detected in the communication link.\n\n### D-LINK_READY.indication\n- **Purpose**: Informs higher layers about a change in communication link status, indicating whether a link has been established or not.\n- **Status Values**: \n  - No link\n  - Link established\n- **Context**: This indication is sent with any change in link status, independent of the states of the control pilot signal.\n\n### D-LINK_TERMINATE.request\n- **Purpose**: Requests lower layers to terminate the data link.\n- **Entity to Support**: EV, EVSE.\n\n---\n\n## Error Handling Procedures\n\n### Loss of Communication\n- When a communication link is lost after a data link has been established (indicated by **D-LINK_READY.indication(link established)**), the higher layers handle this by requesting a **D-LINK_ERROR.request**.\n\n### EVSE Side Error Handling\n1. **In X1 State**: \n   - Upon receiving a **D-LINK_ERROR.request**, the EVSE transitions from state X1 to state E/F and then back to state X1 or X2.\n   \n2. **In X2 State**: \n   - Upon receiving a **D-LINK_ERROR.request**, the EVSE transitions from state X2 to X1, then to state E/F, and finally back to state X1 or X2.\n\n### EV Side Error Handling\n- Upon receiving a **D-LINK_ERROR.request**, the EV's communication node can implement one of the following options:\n  1. **Option A**: Behavior independent of the duty cycle.\n  2. **Option B**: Not to interrupt charging due to a control pilot state change to state E.\n\n---\n\n## Matching Process Overview\n\nThe matching process is crucial for establishing a successful communication link between the EV and EVSE. The default state of a PLC node at plug-in is \"Unmatched.\" A control pilot state change from state A, E, or F to B, C, or D triggers the matching process, which determines the correct EV-EVSE matching by signal strength measurement. A successful matching process leads to the state \"Matched.\"\n\n### Key Steps in the Matching Process\n1. **Entering Matching Process**: Triggered by a control pilot state change.\n2. **Signal Strength Measurement**: Determines the quality of the connection.\n3. **Results**:\n   - **EVSE_FOUND**: A valid EVSE is confirmed.\n   - **EVSE_POTENTIALLY_FOUND**: Ambiguous results requiring validation.\n   - **EVSE_NOT_FOUND**: No valid EVSE detected.\n4. **Validation**: Optional step to confirm the connection if the result is ambiguous.\n5. **Setup Logical Network**: Establishes the data link once a valid EVSE is confirmed.\n6. **D-LINK_READY.ind**: Called to indicate the success or failure of the link establishment.\n\n---\n\n## Timing and Constants\n\nThe timing and constants related to the D-LINK_ERROR.request and the matching process are defined in the ISO 15118 standard. These include:\n- **T_conn_resetup**: Time to reset the matching process after a loss of communication.\n- **TP_match_leave**: Maximum time to leave the logical network.\n- **T_step_EF**: Time to stay in E/F state.\n\n---\n\n## Conclusion\n\nThe **D-LINK_ERROR.request** primitive plays a critical role in managing communication errors within the V2G framework, ensuring that the EV and EVSE can effectively handle disruptions and maintain a reliable connection. The associated error handling procedures and the matching process are essential for establishing a successful data link, enabling efficient energy transfer and communication between electric vehicles and charging infrastructure.",
    "What is CM_SLAC_PARM.CNF?": "# Overview\n\n**CM_SLAC_PARM.CNF** is a confirmation message used in the context of the Signal-Level Attenuation Characterization (SLAC) matching process between an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE). This message is part of the parameter exchange sequence that facilitates the establishment of a communication link for vehicle-to-grid (V2G) interactions. The confirmation indicates that the EVSE's low-layer communication module is ready to proceed with the matching process after receiving a request from the EV.\n\n## Related Topics\n\n### SLAC Parameter Exchange Process\n\n1. **CM_SLAC_PARM.REQ**: \n   - This is the request message sent by the EV to initiate the SLAC parameter negotiation. The EV broadcasts parameters necessary for the signal strength measurement sequence.\n   - The EV sends this request immediately after detecting a plug-in event.\n\n2. **CM_SLAC_PARM.CNF**: \n   - This confirmation message is sent by the EVSE's low-layer communication module in response to a valid **CM_SLAC_PARM.REQ**. \n   - It signifies that the EVSE is ready to engage in the SLAC matching process.\n\n### Matching Process Flow\n\n- The matching process begins when the EV sends a **CM_SLAC_PARM.REQ** message. If the EVSE is not ready (e.g., its low-layer communication module is asleep), it will not respond immediately.\n- Once the EVSE is ready, it sends a **CM_SLAC_PARM.CNF** back to the EV, allowing the matching process to continue.\n\n### Error Handling and Retries\n\n- If the EV does not receive a valid **CM_SLAC_PARM.CNF** within the timeout period defined by **TT_match_response**, it will retransmit the **CM_SLAC_PARM.REQ** message.\n- The total number of retries is governed by the constant **C_EV_match_retry**. If this limit is reached without a successful confirmation, the matching process is deemed to have failed.\n\n## Configuration Requirements\n\n### Message Structure\n\nThe messages involved in the SLAC parameter exchange are defined in the context of the ISO 15118 standard. The following details are relevant:\n\n- **CM_SLAC_PARM.REQ**:\n  - **APPLICATION_TYPE**: Fixed value indicating \u201cPEV-EVSE matching.\u201d\n  - **SECURITY_TYPE**: Fixed value indicating \u201cNo Security.\u201d\n  - **RunID**: A randomly chosen identifier for the matching run.\n\n- **CM_SLAC_PARM.CNF**:\n  - **M-SOUND_TARGET**: Indicates that M-Sounds are to be sent as Ethernet broadcast.\n  - **NUM_SOUNDS**: Number of expected M-Sounds transmitted by the GP station during the SLAC process.\n  - **Time_Out**: Duration for which the EVSE receives incoming M-SOUNDS after a specific indication.\n  - **RESP_TYPE**: Fixed value indicating \u201cOther GP station.\u201d\n  - **FORWARDING_STA**: The destination of SLAC results is always the EV Host.\n\n### Timing and Constants\n\nThe timing parameters that govern the SLAC matching process include:\n\n- **TP_EV_SLAC_init**: Time between plug-in detection and the start of matching by the EV.\n- **TT_match_response**: Time that the EV/EVSE shall wait for a response from the EVSE/EV.\n- **C_EV_match_retry**: Number of retries of the corresponding message within the matching process.\n\n## Example of Matching Process Error Handling\n\nFigure A.9 illustrates the matching process error handling, where the EV sends the first **CM_SLAC_PARM.REQ** message immediately after cable plug-in. If the EVSE's low-layer communication module is not ready, it will not respond. Once the EVSE is ready, it sends a **CM_SLAC_PARM.CNF** to confirm readiness for the matching process.\n\n### Key Messages in the Sequence\n\n- **CM_SET_KEY.REQ** / **CM_SET_KEY.CNF**: Used for setting cryptographic or network keys in the EVSE PLC module.\n- **CM_SLAC_PARM.REQ**: Initiates or retries the SLAC parameter negotiation.\n- **CM_SLAC_PARM.CNF**: Confirms that the EVSE is ready to proceed with the matching process.\n\n## Conclusion\n\nThe **CM_SLAC_PARM.CNF** message plays a critical role in the SLAC matching process, ensuring that the EV and EVSE can establish a reliable communication link for vehicle-to-grid interactions. The structured exchange of requests and confirmations, along with defined timing and error handling mechanisms, facilitates a robust and efficient matching process.",
    "What is D-LINK_TERMINATE.request?": "# Overview\n\n**D-LINK_TERMINATE.request** is a primitive used in the context of Vehicle-to-Grid (V2G) communication, specifically within the ISO 15118-3 standard. This request is sent to lower layers to terminate the data link between an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE). The termination process is essential for managing the communication state and ensuring that the system can reset and transition to a different state as needed.\n\n---\n\n## Related Primitives\n\n### D-LINK_TERMINATE.request\n- **Purpose**: Requests lower layers to terminate the data link.\n- **Entities to Support**: EV, EVSE.\n\n### D-LINK_READY.indication\n- **Purpose**: Informs higher layers about a change in communication link status, indicating whether a link has been established or not.\n- **Entities to Support**: EV, EVSE.\n- **Status Values**: \n  - No link\n  - Link established\n\n### D-LINK_ERROR.request\n- **Purpose**: Requests lower layers to terminate the data link and restart the matching process by transitioning through Control Pilot state E.\n- **Entities to Support**: EVSE.\n\n### D-LINK_PAUSE.request\n- **Purpose**: Requests lower layers to enter a power-saving mode while maintaining the state as \"Matched.\"\n- **Entities to Support**: EV, EVSE.\n\n---\n\n## Process Flow and State Management\n\n### Termination Process\nUpon receiving a **D-LINK_TERMINATE.request** from the higher layer entity (HLE), the following actions are taken:\n1. The low-layer communication module leaves the logical network.\n2. The Network Master Key (NMK) is reset.\n3. The system switches to the matching state \"Unmatched.\"\n\nThis process is crucial for ensuring that all parameters related to the current link are reset to their default values, allowing for a clean state transition.\n\n### Matching Process Overview\nThe matching process is initiated when the EV is connected to the EVSE. The default state of a Power Line Communication (PLC) node at plug-in is \"Unmatched.\" A change in the Control Pilot state triggers the matching process, which involves:\n- Signal strength measurement to determine the correct EV-EVSE matching.\n- Successful matching leads to the state \"Matched.\"\n\nAny transition from the \"Matching\" state triggers a call to the **D-LINK_READY.indication** to indicate whether the data link setup was successful or failed.\n\n### State Transitions\n- **Unmatched**: Default state upon plug-in.\n- **Matching**: Triggered by Control Pilot state changes.\n- **Matched**: Indicates successful matching and readiness for communication.\n\n---\n\n## Timing and Constants\n\nThe timing requirements associated with the D-LINK_TERMINATE.request and related processes are defined in Table 3 of the ISO 15118-3 standard. Key timing parameters include:\n- **TP_match_leave**: Maximum time to leave the logical network.\n- **T_step_EF**: Time to stay in E/F state during error handling or transition.\n\nThese timing parameters ensure that the system adheres to the necessary operational constraints during the matching and termination processes.\n\n---\n\n## Conclusion\n\nThe **D-LINK_TERMINATE.request** is a critical component in the management of data link states within the V2G communication framework. It facilitates the orderly termination of communication links, allowing for resets and transitions to new states, thereby ensuring robust and reliable interactions between EVs and EVSEs. The associated primitives and timing requirements further enhance the operational integrity of the communication process as defined in the ISO 15118-3 standard.",
    "What is D-LINK_READY.indication?": "# Overview\n\n**D-LINK_READY.indication** is a primitive used in the context of Vehicle-to-Grid (V2G) communication, specifically within the ISO 15118 standard. It serves as a notification mechanism to inform higher-layer entities (HLE) about the status of the communication link between an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE). This indication can signal either the establishment of a link or the absence of a link, thereby facilitating the management of communication states during the matching process between the EV and EVSE.\n\n# Related Topics\n\n## Communication Link Status\n\nThe **D-LINK_READY.indication** primitive communicates the status of the communication link as follows:\n\n- **Link Established**: Indicates that the EV has successfully joined the logical network of the EVSE, allowing the higher-layer binding process to commence.\n- **No Link**: Signifies that the communication link has been lost or that the EV is no longer matched with the EVSE.\n\n## Contextual Usage\n\n### Wake-up Process\n- Upon detecting a data link after a wake-up, the lower layers send a **D-LINK_READY.indication(link established)** to the higher layers (Text 1).\n\n### Logical Network Setup\n- When the EV successfully joins the logical network, it informs the higher layers through **D-LINK_READY.indication(link established)**, indicating readiness for the binding process (Text 2).\n\n### Leaving the Logical Network\n- If the low-layer communication module exits the logical network, it sends a **D-LINK_READY.indication(no link)** to notify the higher layers (Text 3).\n\n### Matching Process\n- During the matching process, any transition from the state \"Matching\" triggers a call to **D-LINK_READY.indication** to indicate whether the data link setup was successful or failed (Text 5).\n\n### Loss of Communication\n- If a data link was previously established and a loss of communication is detected, a **D-LINK_READY.indication(no link)** is sent to higher layers to indicate the loss (Text 9).\n\n# Related Primitives\n\n## D-LINK_READY.indication Primitive\n\n| Primitive                | Description                                                                                     |\n|--------------------------|-------------------------------------------------------------------------------------------------|\n| **D-LINK_READY.indication** | Informs higher layers about the status of the communication link: <br>\u2014 no link <br>\u2014 link established |\n\n## D-LINK_TERMINATE.request\n- This primitive requests the lower layers to terminate the data link (Related Information 35).\n\n## D-LINK_ERROR.request\n- This primitive requests the lower layers to terminate the data link and restart the matching process (Related Information 38).\n\n## D-LINK_PAUSE.request\n- This primitive requests the lower layers to enter a power-saving mode while maintaining the state as \"Matched\" (Related Information 41).\n\n# Timing and Constants\n\nThe timing for the **D-LINK_READY.indication** is governed by specific performance timers, such as **TP_link_ready_notification**, which defines the maximum time allowed for notifying higher layers about the link status (Table A.1).\n\n# Conclusion\n\nThe **D-LINK_READY.indication** primitive plays a crucial role in managing the communication link status between EVs and EVSEs within the V2G framework. By signaling the establishment or loss of a link, it enables higher-layer protocols to respond appropriately, ensuring effective communication and coordination during the charging process.",
    "What is the system architecture of Vehicle-to-Grid?": "# Overview\n\nVehicle-to-Grid (V2G) communication refers to the technology that enables electric vehicles (EVs) to interact with the power grid, allowing for bidirectional energy flow. This communication is facilitated through a structured system architecture that aligns with the ISO/IEC Open Systems Interconnection (OSI) reference model. The architecture is defined primarily by the ISO 15118 standards, which specify the requirements for the physical and data link layers, as well as the network and application layers involved in V2G communication.\n\n## System Architecture of Vehicle-to-Grid Communication\n\nThe system architecture of V2G communication is organized into several layers, as illustrated in **Figure 1**. This figure provides an overview of how the ISO 15118 standards align with the OSI model, detailing the roles of various layers and standards involved in V2G communication.\n\n### 1. OSI Layer Structure\n\nThe architecture is divided into three major sections:\n\n- **Lower Layers (OSI Layer 1 and 2)**: Governed by **ISO 15118-3**, which defines the physical layer and data link layer requirements.\n- **Intermediate Layer Boundary**: Represented by the **V2G standardized service primitive interface**, which connects the lower layers with the higher-layer protocols.\n- **Higher Layers (OSI Layers 3 through 7)**: Governed by **ISO 15118-2**, which specifies network and application-level communication, with references to **ISO 15118-1** for general concepts and use-case definitions.\n\n### 2. Detailed Layer Descriptions\n\n#### OSI Layer 1 (Physical)\n- **Role**: Responsible for the transmission and reception of raw bitstreams over a physical medium.\n- **Standard**: **ISO 15118-3** specifies requirements for the physical layer, ensuring interoperability between EVs and Electric Vehicle Supply Equipment (EVSE).\n\n#### OSI Layer 2 (Data Link)\n- **Role**: Establishes and terminates connections between physically connected nodes, handling error detection and basic framing.\n- **Standard**: **ISO 15118-3** also covers data link layer requirements to ensure stable communication for V2G.\n\n#### V2G Standardized Service Primitive Interface\n- **Role**: Serves as the interface that allows higher-level protocols to communicate with the lower-layer technology.\n- **Importance**: Defines how services and primitives are exchanged between the data link layer and higher network/application layers.\n\n#### OSI Layer 3 (Network)\n- **Role**: Handles packet forwarding and routing through intermediate routers.\n- **Standard**: **ISO 15118-2** specifies how the network layer is used for V2G communication.\n\n#### OSI Layer 4 (Transport)\n- **Role**: Responsible for reliable or unreliable end-to-end transport of data.\n- **Standard**: Covered by **ISO 15118-2**, which dictates how the transport layer interacts with the network layer.\n\n#### OSI Layer 5 (Session)\n- **Role**: Manages and controls connections between applications.\n- **Standard**: Part of the coverage in **ISO 15118-2**.\n\n#### OSI Layer 6 (Presentation)\n- **Role**: Ensures data is in a usable format for the application layer.\n- **Standard**: Governed by **ISO 15118-2**.\n\n#### OSI Layer 7 (Application)\n- **Role**: Closest to the end-user, facilitating application-level data exchanges.\n- **Standard**: All relevant V2G messages are part of the application layer protocols described in **ISO 15118-2**.\n\n### 3. Key Standards in V2G Communication\n\n- **ISO 15118-1**: Provides general information and use-case definitions for V2G.\n- **ISO 15118-2**: Specifies network and application protocol requirements.\n- **ISO 15118-3**: Defines physical layer and data link layer requirements.\n\n### 4. Relationship and Connections\n\nThe relationships between the various components and layers are crucial for ensuring effective communication:\n\n- **ISO 15118-3** defines how data is physically encoded and delivered to the next layer via service primitives.\n- The **V2G standardized service primitive interface** allows protocols defined in **ISO 15118-2** to operate independently of the underlying physical or data link technologies.\n- **ISO 15118-2** spans across the network, transport, session, presentation, and application layers, specifying how messages are constructed and validated for V2G communication.\n- **ISO 15118-1** supplies the conceptual building blocks that shape the services needed in layers 1\u20137.\n\n### 5. Flow of Communication\n\nThe communication flow can be summarized as follows:\n\n1. **Physical Layer**: Signals are transmitted over the cable or wireless medium.\n2. **Data Link Layer**: Data is framed, and local links are established error-free.\n3. **V2G Service Interface**: Higher-level protocols control or request link services.\n4. **Network to Application Layers**: Actual V2G messages, session management, security, and application data are exchanged.\n\n## Related Topics\n\n### Communication Layers Overview\nThe communication layers overview emphasizes the separation of the system into two parts: the MAC sublayer of the data link layer and the physical layer, corresponding closely to the lowest layers of the OSI model.\n\n### Configuration Requirements\n- The architecture must ensure that the physical and data link layers are compliant with the specified standards to facilitate interoperability between different manufacturers' EVs and EVSEs.\n\n### Implementation Examples\nFigures A.10 and A.13 illustrate practical implementations of coupling circuits for G3 technology and HomePlug Green PHY signals on the pilot wire, showcasing how these technologies can be integrated into the V2G communication framework.\n\n### Conclusion\nThe system architecture of Vehicle-to-Grid communication is a complex interplay of standards and layers that ensure effective communication between electric vehicles and the power grid. By adhering to the ISO 15118 standards and the OSI model, manufacturers can create interoperable and efficient V2G systems that support the growing demand for electric vehicle integration into the energy ecosystem.",
    "What is the difference between Data SAP and Data link control SAP?": "# Overview\n\nThe terms **Data SAP** and **Data Link Control SAP** refer to specific Service Access Points (SAPs) within the context of the Vehicle-to-Grid (V2G) communication framework as defined in the ISO 15118 standards. These SAPs facilitate communication between different layers of the communication stack, particularly focusing on the interaction between the Data Link layer and higher layers in the OSI model.\n\n## Data SAP\n\nThe **Data SAP** serves as the interface between the Data Link layer (Layer 2) and the Network layer (Layer 3) for the exchange of V2G-related payloads. It is responsible for handling the actual data exchange required for vehicle-to-grid communication, including high-level charging messages as specified in ISO 15118-2. \n\n### Key Characteristics of Data SAP:\n- **Functionality**: Defines the interface for exchanging V2G-related payloads.\n- **Layer Interaction**: Connects Layer 2 (Data Link) to Layer 3 (Network).\n- **Message Handling**: Facilitates the transmission of high-level messages necessary for V2G operations.\n\n## Data Link Control SAP\n\nThe **Data Link Control SAP** provides an interface that manages link status information, error management, and other functionalities related to data link control. It acts as a bridge between the connection coordination module and the lower-level communication technology, ensuring that the link status is effectively communicated to higher layers.\n\n### Key Characteristics of Data Link Control SAP:\n- **Functionality**: Manages link status information and error reporting.\n- **Layer Interaction**: Located between the connection coordination and higher layers.\n- **Control Features**: Provides control functionalities for enabling or disabling link operations.\n\n## Related Primitives\n\nThe following primitives are associated with the Data Link Control SAP, which facilitate various control and status functions:\n\n1. **D-LINK_READY.indication**: \n   - Informs higher layers about changes in communication link status (e.g., link established or no link).\n   - **Entity to Support**: EV, EVSE.\n\n2. **D-LINK_TERMINATE.request**: \n   - Requests lower layers to terminate the data link.\n   - **Entity to Support**: EV, EVSE.\n\n3. **D-LINK_ERROR.request**: \n   - Requests lower layers to terminate the data link and restart the matching process.\n   - **Entity to Support**: EVSE.\n\n4. **D-LINK_PAUSE.request**: \n   - Requests lower layers to enter a power-saving mode while maintaining the matched state.\n   - **Entity to Support**: EV, EVSE.\n\n## Configuration Requirements\n\nThe Data SAP and Data Link Control SAP are integral to the communication architecture defined in ISO 15118-3, which outlines the physical and data link layer requirements for V2G communication. The following points summarize the configuration and operational requirements:\n\n- **Data SAP**: \n  - Must be implemented to ensure proper data exchange between the Data Link layer and higher layers (e.g., IPv6).\n  \n- **Data Link Control SAP**: \n  - Should provide link status information and error management to ensure reliable communication.\n  - Must be integrated with the connection coordination module to manage link functionalities effectively.\n\n## Conclusion\n\nIn summary, the **Data SAP** and **Data Link Control SAP** are critical components of the V2G communication framework, each serving distinct roles in facilitating data exchange and managing link status. Understanding their functionalities and interactions is essential for implementing robust vehicle-to-grid communication systems as per the ISO 15118 standards.",
    "What is CM_VALIDATE.REQ?": "# Overview\n\n**CM_VALIDATE.REQ** is a message used in the validation process of the Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE) communication, specifically within the context of the ISO 15118 standard. This message is part of a two-step request-response mechanism that facilitates the confirmation of a valid connection between the EV and the EVSE based on signal strength measurements and subsequent validation procedures.\n\n## Validation Process\n\nThe validation process is divided into two parts, consisting of **CM_VALIDATE.REQ** and **CM_VALIDATE.CNF** messages. The first request-response exchange is initiated by the EV to confirm the readiness of the EVSE to perform the validation process.\n\n### Step 1: Initial Request-Response\n\n1. **CM_VALIDATE.REQ**:\n   - The EV sends a **CM_VALIDATE.REQ** message to the EVSE, which includes:\n     - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n     - **Timer**: Set to zero in the first request.\n     - **Result**: Set to 0x01, indicating \"ready\" for the validation process.\n\n2. **CM_VALIDATE.CNF**:\n   - The EVSE responds with a **CM_VALIDATE.CNF** message, which includes:\n     - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n     - **ToggleNum**: Set to zero in the first response.\n     - **Result**: This field can contain various values:\n       - **0x00**: Not Ready (indicating the EVSE is busy).\n       - **0x01**: Ready (indicating the EVSE is prepared to continue).\n       - **0x02**: Success (not used in the first exchange).\n       - **0x03**: Failure (indicating the EVSE does not support the validation process).\n       - **0x04**: Not Required (indicating validation is not necessary).\n\n### Step 2: Follow-Up Request-Response\n\nIf the EVSE indicates it is \"ready,\" the EV proceeds to send a second **CM_VALIDATE.REQ** message, which includes a timer value that covers the duration of the BCB-Toggle sequence.\n\n1. **BCB-Toggle Sequence**:\n   - The EV performs a sequence of toggles on the control pilot line, referred to as the BCB-Toggle sequence, during the time specified by the timer in the second request.\n\n2. **CM_VALIDATE.CNF**:\n   - The EVSE counts the number of BCB-Toggles during the specified time and responds with a **CM_VALIDATE.CNF** message that includes:\n     - **ToggleNum**: The number of toggles detected.\n     - **Result**: This field can indicate:\n       - **0x00**: Not Ready.\n       - **0x01**: Ready.\n       - **0x02**: Success (indicating the toggle process was successful).\n       - **0x03**: Failure (indicating the toggle process could not be completed successfully).\n       - **0x04**: Not Required.\n\n### Validation Outcomes\n\n- If the result field of the second **CM_VALIDATE.CNF** indicates \"Success,\" the EV confirms the connection and continues with the next steps in the communication process.\n- If the result indicates \"Failure,\" \"Not Ready,\" or \"Not Required,\" the EV will stop the validation process with the current EVSE and may proceed to validate with the next potential EVSE.\n\n## Related Topics\n\n### Signal Strength Measurement\n\nBefore initiating the validation process, the EV measures the signal strength from potential EVSEs to determine which one is the most suitable for connection. This involves sending a series of messages to assess the signal quality and make a decision based on the results.\n\n### BCB-Toggle Sequence\n\nThe BCB-Toggle sequence is a critical part of the validation process, where the EV toggles the control pilot state to confirm the connection with the EVSE. The number of toggles performed is determined randomly within the available time.\n\n### Timing and Constants\n\nThe validation process involves specific timing parameters, such as:\n- **TP_EV_vald_toggle**: Duration of the BCB-Toggle sequence.\n- **TT_match_response**: Time the EV/EVSE waits for a response after sending a request.\n\n### Error Handling\n\nIf any received **CM_VALIDATE.REQ** contains invalid content, it will be ignored. The EVSE must respond appropriately based on its current state and capabilities, ensuring that the validation process is robust and can handle various scenarios.\n\n## Figures and Tables\n\n### Table A.5 \u2014 MME Parameters Definition for Validation Process \u2013 First Request-Response\n\n| MME                | Field         | Octet no. | Field size (Octets) | Value | Definition |\n|--------------------|---------------|-----------|---------------------|-------|------------|\n| CM_VALIDATE.REQ    | Signal Type   | 0         | 1                   | 0x00  | Fixed value to indicate \u201cPEV S2 toggles on control pilot line\u201d |\n|                    | Timer         | 1         | 1                   | 0x00  | Fixed value; in the first VALIDATE Request-Response exchange, the Timer field shall be set to zero. |\n|                    | Result        | 2         | 1                   | 0x01  | Fixed value; in the first VALIDATE Request-Response exchange, the Result field shall be set to 0x01 = \u201cready\u201d. |\n\n### Table A.6 \u2014 MME Parameters Definition for Validation Process \u2013 Second Request-Response\n\n| MME                | Field         | Octet no. | Field size (Octets) | Value | Definition |\n|--------------------|---------------|-----------|---------------------|-------|------------|\n| CM_VALIDATE.REQ    | Signal Type   | 0         | 1                   | 0x00  | Fixed value to indicate \u201cPEV S2 toggles on control pilot line\u201d |\n|                    | Timer         | 1         | 1                   | variable | Variable value indicating the time duration while the EVSE shall listen to BCB-Toggles. |\n|                    | Result        | 2         | 1                   | 0x01  | Fixed value; in the second VALIDATE Request-Response exchange, the Result field shall be set to 0x01 = \u201cready\u201d. |\n\nThis structured approach ensures that the EV and EVSE can effectively communicate and validate their connection, facilitating a reliable vehicle-to-grid interaction.",
    "What is SLAC?": "# Overview\n\nSLAC, or Signal Level Attenuation Characterization, is a protocol defined in the ISO 15118-3 standard, which is part of the Vehicle-to-Grid (V2G) communication interface. It is specifically designed to measure the signal strength between HomePlug Green PHY stations, facilitating the identification of available Electric Vehicle Supply Equipment (EVSE) nodes and determining the appropriate connection for electric vehicles (EVs). The SLAC process involves measuring the attenuation of signals transmitted from the EV to the EVSE across different frequency groups and reporting these measurements back to the EV.\n\n# Related Topics\n\n## Signal Strength Measurement\nThe SLAC process is integral to the signal strength measurement method used in V2G communication. It allows the EV to ascertain which EVSE nodes are available for connection. The EVSE measures the signal attenuation from the EV and reports the signal strength back, enabling the EV to identify the most suitable EVSE for connection.\n\n### Functional Description\n- The EV determines available EVSE nodes and the correct one to connect to by measuring the attenuation of the signal from the EV for various frequency groups.\n- The EVSE reports the signal strength back to the EV, which then decides on the appropriate EVSE to connect with.\n\n## SLAC Implementation\nThe SLAC process is implemented through a series of Management Message Entries (MMEs) defined in the ISO 15118-3 standard. These MMEs facilitate the communication and measurement processes necessary for effective signal strength characterization.\n\n### Involved MMEs\n- The low-layer communication module on both the EV and EVSE sides must comply with the defined MMEs for the SLAC process.\n- Parameters used within the MMEs are specified in Table A.4 of the standard.\n\n## Timing and Constants\nThe SLAC process involves specific timing and constant values that govern the communication and measurement intervals during the signal strength characterization.\n\n### Key Timings\n- **C_conn_max_match**: Number of retries for the matching process (minimum of 3).\n- **T_conn_init_HLC**: Minimum duration after a state transition (200 ms).\n- **T_conn_max_comm**: Time after plug-in until the communication module is ready (maximum of 8 seconds).\n- **T_step_EF**: Time to stay in the error/fault state (4 seconds).\n\n## Configuration Requirements\nThe SLAC process requires specific configurations to ensure proper communication and measurement.\n\n### Ethernet MAC Addressing\n- The Ethernet Destination MAC address field must be filled as either Broadcast or Unicast, as defined in Table A.4.\n\n### MME Parameters\nTable A.4 outlines the parameters for the SLAC MMEs, including:\n- **CM_START_ATTEN_CHAR.IND**: Initiates the SLAC process.\n- **CM_MNBC_SOUND.IND**: Used for transmitting M-Sounds during the SLAC process.\n- **CM_ATTEN_CHAR.IND**: Reports the attenuation values back to the EV.\n\n## Signal Attenuation Calculation\nThe SLAC process involves calculating the average attenuation based on the measurements taken during the signal strength characterization.\n\n### Average Attenuation\n- The Average_Attenuation used for matching decisions is calculated as the arithmetic mean of all groups in the CM_ATTEN_CHAR.IND message.\n- A weighted average may be used to account for implementation specifics, ensuring that the sum of the weights equals one.\n\n# Figures and Tables\n\n## Table A.4 \u2014 MME Parameters Definition for SLAC\n| MME                     | Field                | Octet no. | Field size (Octets) | Value | Definition |\n|-------------------------|----------------------|-----------|---------------------|-------|------------|\n| CM_START_ATTEN_CHAR.IND | APPLICATION_TYPE     | 0         | 1                   | 0x00  | Fixed value indicating \u201cPEV-EVSE Matching\u201d |\n|                         | SECURITY_TYPE        | 1         | 1                   | 0x00  | Fixed value indicating \u201cNo Security\u201d |\n|                         | NUM_SOUNDS           | 2         | 1                   | C_EV_match_MNBC | Number of M-Sounds transmitted |\n|                         | Time_Out             | 3         | 1                   | TT_EVSE_match_MNBC | Max. time window for M-Sounds |\n|                         | RESP_TYPE            | 4         | 1                   | 0x01  | Fixed value indicating \u201cother Green PHY station\u201d |\n|                         | FORWARDING_STA       | 5 to 10    | 6                   | EV Host MAC address | Destination of SLAC results |\n|                         | RunID                | 11 to 18   | 8                   | variable | Same as sent in CM_SLAC_PARMS.REQ |\n\n## Table A.1 \u2014 Timing and Constant Values\n| Parameter                | Description                                         | Min | Typical | Max | Unit |\n|--------------------------|-----------------------------------------------------|-----|---------|-----|------|\n| C_conn_max_match         | Number of retries of matching process               | 3   |         |     | nbr  |\n| T_conn_init_HLC          | Minimum B state duration after a state F, D, or C  | 200 |         |     | ms   |\n| T_conn_max_comm          | Time after plug-in until the communication module is ready |     |         | 8   | s    |\n| T_step_EF                | Time to stay at E/F state                           | 4   |         |     | s    |\n\nThis comprehensive overview of SLAC provides a detailed understanding of its role in V2G communication, the processes involved, and the necessary configurations for effective implementation.",
    "What is CM_SET_KEY.CNF?": "# Overview\n\n**CM_SET_KEY.CNF** is a confirmation message used in the context of the low-layer communication module for electric vehicles (EVs) and electric vehicle supply equipment (EVSE). It is part of the process that allows the EV to join the logical network of the EVSE after the matching process has been completed. This message is crucial for configuring the low-layer communication module with the necessary parameters for secure communication.\n\n# Related Topics\n\n## Joining the Logical Network\n\nThe process of joining the logical network involves several steps, including the discovery of the EVSE, signal strength measurement, and the configuration of network parameters. The low-layer communication module on the EV side must determine the appropriate EVSE to connect to based on the signal strength measurements and the results of the SLAC (Smart Load Acceptance Control) process.\n\n### Signal Strength Measurement\n\nThe EV uses signal strength measurements to identify available EVSE nodes. The EVSE measures the attenuation of the signal coming from the EV for different frequency groups and reports the signal strength back to the EV. Based on these reports, the EV determines which EVSE is the most probable candidate for connection.\n\n## Configuration Requirements\n\nThe configuration of the low-layer communication module is performed using the **CM_SET_KEY.REQ** and **CM_SET_KEY.CNF** messages. After the EV receives a **CM_SLAC_MATCH.CNF** from the EVSE, it must configure its low-layer communication module to the values specified in this message using the **CM_SET_KEY.REQ**. The configuration can occur at any time before or after the **CM_SLAC_MATCH.CNF** message is received.\n\n### Handling Negative Responses\n\nIt is important to note that the implementation can determine how to handle a negative response in a **CM_SET_KEY.CNF** or if the **CM_SET_KEY.CNF** is missing altogether. This flexibility allows for different implementations to manage errors or unexpected situations in their own way.\n\n# Related Primitives\n\n## Message Flow\n\nThe message flow during the matching process is critical for establishing a successful connection between the EV and the EVSE. The following messages are involved:\n\n1. **CM_ATTEN_CHAR.IND**: This message is sent by the EV to inform the EVSE of the signal strength measurements.\n2. **CM_SET_KEY.REQ**: This request message is sent by the EV to configure the low-layer communication module with the necessary parameters.\n3. **CM_SET_KEY.CNF**: This confirmation message is sent by the EVSE to acknowledge the configuration request.\n\n## EV_Discovering_Status\n\nThe status of the EV discovering process is defined in Table A.3, which outlines the different statuses based on the signal strength measurements:\n\n| Status                  | Average Attenuation Range                     | Description                                           |\n|-------------------------|----------------------------------------------|-------------------------------------------------------|\n| EVSE_FOUND              | -                                            | The EVSE is identified without any doubt.             |\n| EVSE_POTENTIALLY_FOUND  | C_EV_match_signal_attn_direct to C_EV_match_signal_attn_indirect | One or several EVSEs are identified; further matching is needed. |\n| EVSE_NOT_FOUND          | C_EV_match_signal_attn_indirect             | No directly connected EVSE is found.                   |\n\nThe EV must inform the corresponding EVSE based on the **EV_Discovering_Status** after the signal strength measurement process.\n\n# Conclusion\n\nIn summary, **CM_SET_KEY.CNF** plays a vital role in the configuration of the low-layer communication module for EVs and EVSEs, facilitating secure and effective communication. The process of joining the logical network involves several steps, including signal strength measurement and the exchange of specific messages, ensuring that the EV can successfully connect to the appropriate EVSE. The handling of responses and the configuration requirements are essential for the robustness of the communication process.",
    "What is CM_ATTEN_PROFILE.IND?": "# Overview\n\n**CM_ATTEN_PROFILE.IND** is a message used in the context of signal strength measurement between an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE). This message is part of the process that allows the EV to determine which EVSE nodes are available for connection. The attenuation profile contained within this message is calculated based on previous measurements and corrected for specific path losses, ensuring accurate communication and connection decisions.\n\n# Signal Strength Measurement Process\n\n## Purpose\nThe signal strength measurement process is essential for the EV to identify available EVSE nodes and determine the most suitable one to connect to. The EVSE measures the attenuation of the signal received from the EV across different frequency groups and reports this back to the EV.\n\n## Process Steps\n1. **Initiation**: After parameter exchange, the EV begins the signal strength measurement by sending the message **CM_START_ATTEN_CHAR.IND** multiple times, followed by a series of M-SOUNDS.\n2. **Measurement**: Each potential EVSE calculates the signal strength based on the received M-SOUNDS and sends the results back using the **CM_ATTEN_CHAR.IND** message.\n3. **Confirmation**: The EV confirms receipt of each **CM_ATTEN_CHAR.IND** with an individual **CM_ATTEN_CHAR.RSP**.\n\n## Calculation of ATTEN_PROFILE\nThe **ATTEN_PROFILE** within the **CM_ATTEN_CHAR.IND** message is calculated as follows:\n- It is the arithmetic mean of the **ATTEN_PROFILE** values from previous **CM_ATTEN_PROFILE.IND** messages, corrected by the attenuation of the receive path (AttnRxEVSE).\n\n# Related Topics\n\n## Signal Strength Measurement Method\nThe method used for measuring signal strength is defined as **SLAC** (Signal Level Attenuation Characterization), which is specified in the HomePlug Green PHY (HPGP) standards.\n\n## Attenuation Correction\nThe low-layer communication module on the EV side does not have knowledge of the **AttnRxEVSE** value, which affects the SLAC measurement. Therefore, the EVSE must correct the measurement values by this attenuation before reporting back to the EV.\n\n## Attenuation Values\n- **AttnRxEVSE**: This is the insertion loss of the receiving path between the HomePlug Green PHY modem and the charge coupler on the EVSE side. An example value is 3 dB.\n- **AttnTxEV**: The insertion loss of the transmitting path on the EV side, with an example value of 4 dB.\n- **AttnCord**: The insertion loss of the charge cord itself, which also contributes to the overall signal attenuation.\n\n# Configuration Requirements\n\n## Average Attenuation Calculation\nThe average attenuation used for matching decisions is calculated by taking the arithmetic mean of all groups in the **CM_ATTEN_CHAR.IND** message. A weighted average may also be used, where the sum of the weights must equal one.\n\n## EV Discovery Status\nBased on the signal attenuation reported in the **CM_ATTEN_CHAR.IND** message, the **EV_Discovery_Status** is set according to predefined thresholds:\n- **EVSE_FOUND**: Indicates a direct connection to the EVSE.\n- **EVSE_POTENTIALLY_FOUND**: Indicates potential connections that require further validation.\n- **EVSE_NOT_FOUND**: Indicates no direct connection to any EVSE.\n\n# Figures and Tables\n\n## Figure A.11: Transmission Path Example\nThis figure illustrates the transmission path for the PLC signal, showing example values for attenuations and power spectral densities (PSDs). It highlights how the signal is affected by various insertion losses along the path from the EV to the EVSE.\n\n## Table A.3: EV_Discovery_Status Definition\nThis table defines the different statuses that can be assigned to the EV based on the average attenuation values received during the signal strength measurement process.\n\n| Status                     | Average_Attenuation From | Average_Attenuation To | Description                                                                 |\n|---------------------------|--------------------------|------------------------|-----------------------------------------------------------------------------|\n| EVSE_FOUND                | -                        | C_EV_match_signal-attn_direct | The EVSE is identified without any doubt.                                   |\n| EVSE_POTENTIALLY_FOUND    | C_EV_match_signal-attn_direct | C_EV_match_signal-attn_indirect | One or several EVSEs are identified; further matching is required.         |\n| EVSE_NOT_FOUND            | C_EV_match_signal-attn_indirect | -                      | No direct connected EVSE is found.                                         |\n\nThis structured approach ensures that the communication between the EV and EVSE is efficient and reliable, facilitating the vehicle-to-grid interaction necessary for modern electric vehicle charging systems.",
    "What is HPGP?": "## Overview\n\nHPGP, or HomePlug Green PHY, is a communication protocol designed for use in electric vehicle supply equipment (EVSE) and electric vehicles (EVs). It enables bidirectional communication over the control pilot line, which is a critical component in the vehicle-to-grid communication interface. The HomePlug Green PHY signals are injected into the control pilot line to facilitate this communication, allowing for the exchange of data related to charging states and other operational parameters.\n\n## Signal Injection Requirements\n\n### General Overview\nThe requirements for injecting HomePlug Green PHY signals into the control pilot line are defined to ensure effective communication between the EVSE and the EV. This involves specific considerations regarding signal coupling, signal levels, and the use of carriers.\n\n### Signal Coupling\nThe HomePlug Green PHY signals must be injected in a manner that allows for both the control pilot signal and the HomePlug Green PHY signals to coexist without interference. The coupling circuit's capacity must be carefully managed, taking into account the capacitive load from the EV, EVSE, and the charging cord.\n\n### Technical Implementation\nThe implementation of HomePlug Green PHY signals involves a dedicated pair of HomePlug Green PHY chips on both the EVSE and EV sides, connected via the control pilot wire. The schematic in Figure A.10 illustrates the parallel injection method, which allows for the high-frequency HomePlug Green PHY signals to be transmitted alongside the low-frequency control pilot signals.\n\n## Components and Their Functions\n\n### Key Components\n1. **EVSE (Electric Vehicle Supply Equipment)**: Provides the control pilot signal and facilitates communication through the Green PHY modem.\n2. **EV (Electric Vehicle)**: Receives the control pilot signal and communicates back through its own Green PHY modem.\n3. **Oscillator**: Generates the low-frequency control pilot signal (\u00b112 V, 1 kHz).\n4. **Green PHY Modems**: Handle the high-frequency HomePlug Green PHY communication.\n5. **Capacitors and Resistors**: Shape the pilot signal and manage the coupling of high-frequency signals.\n\n### Signal Flow\nThe signal flow begins with the oscillator generating the control pilot signal, which is then shaped by resistors and capacitors before being injected into the control pilot line. The high-frequency HomePlug Green PHY signals are injected in parallel to the control pilot signal, ensuring that both signals can be transmitted effectively.\n\n## Signal Requirements\n\n### Table A.11: Electrical Characteristics\nTable A.11 outlines the specific electrical characteristics that the physical signals must comply with to enable HomePlug Green PHY injection into the control pilot line. Key parameters include:\n\n- **Length of the cable assembly**: Minimum of 10 meters.\n- **Capacitance (CPLC)**: Typically around 1.35 nF.\n- **Damping Resistor (RDamp)**: Typically around 220 \u03a9 to 1 k\u03a9.\n- **Inductance (L)**: Typically around 220 \u00b5H.\n- **Power Spectral Density**: Defined for frequencies from 1.8 MHz to 30 MHz, with a maximum of -73 dBm/Hz.\n\n### Additional Notes\n- The maximum peak-to-peak voltage of HomePlug Green PHY signals is linked to the power spectral density and must be measured under specific conditions.\n- Conducted crosstalk from the control pilot line to the mains must be limited to -40 dB from 2 MHz to 28 MHz.\n\n## Conclusion\n\nHomePlug Green PHY (HPGP) is a vital component in the communication framework between electric vehicles and their charging infrastructure. By adhering to the defined signal requirements and utilizing the appropriate components, effective bidirectional communication can be achieved, facilitating enhanced vehicle-to-grid interactions. The careful design of the signal injection process ensures that both the control pilot and HomePlug Green PHY signals can operate simultaneously without degradation of performance.",
    "What is CCo?": "# Overview\nCCo, or Central Coordinator, is a key component in the context of vehicle-to-grid communication interfaces, specifically within the HomePlug Green PHY network. It serves as the manager of the network, facilitating communication between electric vehicles (EVs) and electric vehicle supply equipment (EVSE).\n\n# Definition\n- **CCo (Central Coordinator)**: The entity responsible for managing a HomePlug Green PHY network, ensuring effective communication and coordination between connected devices.\n\n# Functional Description\n- The low-layer communication module on the EV side is configured to never become the CCo, while the low-layer communication module on the EVSE side is configured to always be the CCo. This distinction is crucial for maintaining the integrity and functionality of the communication network.\n\n# Configuration Requirements\n- For the configuration of the CCo mode, the APCM_SET_CCo.REQ primitive, as defined in the \"Control SAP Service\" of the HomePlug Green PHY (HPGP), may be utilized. This primitive is essential for establishing the CCo's operational parameters within the network.\n\n# Related Topics\n- **HomePlug Green PHY**: A communication protocol that enables bidirectional communication between EVSE and EVs over the control pilot line.\n- **Vehicle-to-Grid (V2G)**: A system that allows for the transfer of energy between electric vehicles and the power grid, facilitated by the CCo.\n\n# Additional Context\n- The CCo plays a critical role in ensuring that the communication between the EV and EVSE is efficient and reliable, which is vital for the successful implementation of vehicle-to-grid technologies. \n\nThis structured approach to understanding CCo highlights its importance in the vehicle-to-grid communication framework, ensuring clarity in its role and functionality.",
    "What is CM_MNBC_SOUND.IND?": "# Overview\n**CM_MNBC_SOUND.IND** is a message used in the context of the signal strength measurement process between an Electric Vehicle (EV) and an Electric Vehicle Supply Equipment (EVSE). This message is part of the Vehicle-to-Grid (V2G) communication framework defined in the ISO 15118 standards, specifically related to the matching process that determines the appropriate EVSE for the EV to connect to.\n\n# Signal Strength Measurement Process\nThe signal strength measurement process is crucial for the EV to identify which EVSE nodes are available and to select the correct one for connection. The process involves the following steps:\n\n1. **Initiation**: After the parameter exchange, the EV begins the signal strength measurement by sending a specified number of **CM_START_ATTEN_CHAR.IND** messages, defined by the parameter **C_EV_start_atten_char_inds**.\n2. **M-Sounds Transmission**: Following the initial messages, the EV sends a number of M-Sounds, defined by the parameter **C_EV_match_MNBC**. These M-Sounds are crucial for the EVSE to calculate the signal strength.\n3. **Signal Strength Calculation**: Each potential EVSE calculates the signal strength based on the received M-Sounds and sends back the measurement results using the **CM_ATTEN_CHAR.IND** message.\n4. **Confirmation**: The EV confirms each **CM_ATTEN_CHAR.IND** message with an individual **CM_ATTEN_CHAR.RSP**.\n\n# Related Parameters\nThe following parameters are relevant to the **CM_MNBC_SOUND.IND** message and the overall signal strength measurement process:\n\n- **C_EV_match_MNBC**: Number of M-Sounds sent for the SLAC (Smart Low-layer Access Communication).\n- **C_EV_start_atten_char_inds**: Number of **CM_START_ATTEN_CHAR.IND** messages sent by the EV.\n- **C_EV_match_signalattn_direct**: Lower threshold for the signal strength measurement.\n- **C_EV_match_signalattn_indirect**: Higher threshold for the signal strength measurement.\n\n# Timing and Constants\nThe timing and constants associated with the signal strength measurement process are summarized in the following tables:\n\n## Table A.1 \u2014 Timing and Constant Values\n| Parameter                       | Description                                                  | Min | Typical | Max | Unit |\n|---------------------------------|--------------------------------------------------------------|-----|---------|-----|------|\n| C_EV_match_MNBC                | Number of M-Sounds sent for the SLAC                        |     | 10      |     | nbr  |\n| C_EV_start_atten_char_inds      | Number of **CM_START_ATTEN_CHAR.IND** messages sent by the EV |     | 3       |     | nbr  |\n| C_EV_match_signalattn_direct    | Lower threshold for the signal strength measurement          |     | 10      |     | dB   |\n| C_EV_match_signalattn_indirect   | Higher threshold for the signal strength measurement         |     | 20      |     | dB   |\n\n## Table A.3 \u2014 EV_Discovering_Status Definition\n| Status                       | Average_Attenuation From | Average_Attenuation To | Description                                                                 |\n|------------------------------|--------------------------|------------------------|-----------------------------------------------------------------------------|\n| EVSE_FOUND                   | -                        | C_EV_match_signalattn_direct | The EVSE is identified without any doubt                                   |\n| EVSE_POTENTIALLY_FOUND       | C_EV_match_signalattn_direct | C_EV_match_signalattn_indirect | One or several EVSEs are identified. The next step will decide the most probable candidate. |\n| EVSE_NOT_FOUND               | C_EV_match_signalattn_indirect | -                      | No direct connected EVSE is found                                          |\n\n# Conclusion\nThe **CM_MNBC_SOUND.IND** message plays a vital role in the signal strength measurement process, enabling the EV to effectively identify and connect to the appropriate EVSE. The parameters and timing values associated with this process ensure that the communication is efficient and reliable, adhering to the standards set forth in the ISO 15118 framework.",
    "What is the difference between basic signalling and high-level communication?": "# Overview\nThe distinction between basic signalling and high-level communication (HLC) is crucial in the context of electric vehicle (EV) charging processes. Basic signalling serves as the foundational communication method, while high-level communication builds upon this foundation to enable more complex interactions and features.\n\n## Basic Signalling\nBasic signalling is defined as follows:\n\n- **Compliance and Standards**: Basic signalling follows the guidelines set forth in [IEC-1], ensuring that all timings are compliant with the specifications outlined in Annex A of the standard.\n- **Functionality**: It is utilized in any charging process, regardless of the presence of high-level communication. Basic signalling employs bidirectional signalling to convey EV-related information through control pilot states and EVSE (Electric Vehicle Supply Equipment) related information via the duty cycle of the control pilot signal.\n\n### Key Points\n- **Bidirectional Signalling**: Indicates information related to both the electric vehicle and the charging station.\n- **Standard Compliance**: Adheres to [IEC-1] requirements.\n\n## High-Level Communication\nHigh-level communication is characterized by its additional capabilities beyond basic signalling:\n\n- **Supplementary Role**: HLC is used in conjunction with basic signalling to facilitate bidirectional communication and to provide additional features that are not available through basic signalling alone.\n- **Data Exchange Protocol**: The sequence of data exchange during an HLC-based charging session is governed by the [ISO-2] communication protocol.\n\n### Structure of High-Level Communication\nHigh-level communication can be divided into three distinct periods:\n\n1. **Data Link Setup**: Establishes the initial connection for communication.\n2. **V2G Setup**: Prepares the system for vehicle-to-grid interactions.\n3. **V2G Charging Loop**: Manages the ongoing communication and data exchange during the charging process.\n\n### Key Points\n- **Enhanced Features**: HLC enables more complex interactions and functionalities compared to basic signalling.\n- **Dynamic Information Handling**: During the V2G charging loop, the PWM (Pulse Width Modulation) duty cycle is maintained unless dynamically changed grid information is communicated through high-level messages.\n\n## Summary\nIn summary, basic signalling provides the essential communication framework for EV charging, while high-level communication enhances this framework by enabling more sophisticated interactions and features. The integration of both systems allows for efficient and effective management of EV charging processes.",
    "What is D-LINK_PAUSE.request?": "# Overview\n\n**D-LINK_PAUSE.request** is a primitive used in the context of Vehicle-to-Grid (V2G) communication, specifically within the ISO 15118 standards. This request instructs the lower layers of the communication stack to enter a power-saving mode while maintaining the current state as \"Matched.\" This functionality is essential for energy efficiency during periods when active communication is not required.\n\n## Related Primitives\n\n### D-LINK_PAUSE.request\n- **Function**: Requests lower layers to enter a power-saving mode.\n- **State Maintenance**: While in this mode, the state will be kept as \"Matched.\"\n\n### D-LINK_READY.indication\n- **Function**: Indicates to higher layers whether a data link has been successfully established or not.\n- **Context**: Any transition from the state \"Matching\" triggers a call of this primitive to inform about the data-link setup status.\n\n### D-LINK_TERMINATE.request\n- **Function**: Requests lower layers to terminate the data link.\n\n### D-LINK_ERROR.request\n- **Function**: Requests lower layers to terminate the data link and restart the matching process by transitioning through a control pilot state.\n\n## Configuration Requirements\n\n### Entering Sleep Mode\n- Upon receiving a **D-LINK_PAUSE.request**:\n  - **EV Behavior**: The Electric Vehicle (EV) shall change to control pilot state Bx. Unpowering the low-layer communication module is optional, and the logical network parameter set shall be stored for continuing the data link after the sleeping phase.\n  - **EVSE Behavior**: The Electric Vehicle Supply Equipment (EVSE) shall switch to control pilot state X1 and may switch the low-layer communication module into low-power mode. The logical network parameter set shall also be stored for continuing the data link after the sleeping phase.\n\n### Wake-Up Mechanism\n- If the EVSE or EV is in a \"Matched state\" and has been woken up from the counterpart station, the low-layer communication module shall be configured to the last known logical network parameter set.\n\n## Related Processes\n\n### Matching Process\n- The matching process is initiated when a control pilot state change occurs, transitioning from states A, E, or F to B, C, or D. This process determines the correct EV-EVSE matching based on signal strength measurement. A successful matching process leads to the state \"Matched.\"\n\n### Sleep Mode and Wake-Up\n- A sleep mode is utilized for energy saving, allowing both the EV and EVSE to enter a low-power state after negotiating a pause through the High-Level Communication (HLC) protocol. The wake-up process involves detecting specific control pilot state transitions to re-establish communication.\n\n## Summary\n\nThe **D-LINK_PAUSE.request** primitive plays a crucial role in managing power consumption during V2G communication by allowing devices to enter a low-power state while maintaining their matched status. This functionality is part of a broader set of primitives and processes that ensure efficient and effective communication between electric vehicles and charging infrastructure.",
    "What is CM_AMP_MAP.REQ?": "# Overview\n\n**CM_AMP_MAP.REQ** is a message used in the context of amplitude map exchange between Electric Vehicles (EVs) and Electric Vehicle Supply Equipment (EVSE). This message facilitates the communication of transmission power limitations for specific carriers, allowing the involved low-layer communication modules to adjust their transmission power accordingly. The exchange of this message is part of the broader process of matching EVs with EVSEs to ensure efficient and compliant communication over the power line.\n\n---\n\n## Functional Description\n\n### Purpose of CM_AMP_MAP.REQ\n- The **CM_AMP_MAP.REQ** message can be sent from one host to another through the low-layer communication module. Its primary function is to transmit the requested transmission power per carrier to the destination host, which will then include this information in its amplitude map calculation. \n- This message does not directly influence the transmission power of the low-layer communication module; rather, it serves as an informational exchange.\n\n### Initiation of Amplitude Map Exchange\n- An amplitude map exchange can be initiated by either an EV or an EVSE by sending a **CM_AMP_MAP.REQ** message. This process is optional and allows for the adjustment of transmission power for certain carriers.\n\n### Confirmation Requirement\n- The sending of a **CM_AMP_MAP.REQ** must be confirmed by the counterpart node through a **CM_AMP_MAP.CNF** message. This confirmation ensures that the requested changes are acknowledged and processed.\n\n---\n\n## Transmission Power Limitation\n\n### Reference Values\n- All transmission power values within the **CM_AMP_MAP** messages are related to a reference value of **\u221250 dBm/Hz**. The resolution of the amplitude map data (AMDATA) is **\u22122 dB**, meaning that an AMDATA value of **0b0011** corresponds to a power level of **\u22126 dB**.\n\n### Example of Power Limitation Request\n- For instance, if an EVSE requests a limitation of the power of carriers 2 and 3 to **\u221278 dBm/Hz**, while leaving other carriers unaffected, the EV will compare these requested values against its default power spectral density (PSD) at the socket. If the requested values are lower than the defaults, the EV will confirm the request and adjust its settings accordingly.\n\n---\n\n## Message Structure\n\n### CM_AMP_MAP.REQ Message Format\nThe **CM_AMP_MAP.REQ** message is structured as follows:\n\n| Field        | Octet No. | Field Size | Value | Definition |\n|--------------|------------|------------|-------|------------|\n| AMLEN        | 0 to 1     | 2 Octets   | 0x3A  | Fixed value indicating the number of carriers used |\n| AMDATA[0]   | 2          | 4 Bits     | variable | Amplitude Map Data: 4 LSBs of the first unmasked carrier |\n| AMDATA[1]   | 2          | 4 Bits     | variable | Amplitude Map Data: 4 MSBs of the second unmasked carrier |\n| AMDATA[n]   | -          | 4 Bits     | variable | Additional amplitude map data for subsequent carriers |\n\n### CM_AMP_MAP.CNF Message Format\nThe **CM_AMP_MAP.CNF** message is structured as follows:\n\n| Field        | Octet No. | Field Size | Value   | Definition |\n|--------------|------------|------------|---------|------------|\n| ResType      | 0          | 1 Octet    | variable | Result code: 0x00 = success, 0x01 = failure, 0x02 \u2013 0xFF = reserved |\n\n---\n\n## Related Processes\n\n### Amplitude Map Exchange Process\n- The amplitude map exchange process involves the following steps:\n  1. **Initiation**: Either the EV or EVSE sends a **CM_AMP_MAP.REQ** message.\n  2. **Confirmation**: The receiving node must respond with a **CM_AMP_MAP.CNF** message to confirm the request.\n  3. **Adjustment**: The receiving node adjusts its transmission power based on the information provided in the **CM_AMP_MAP.REQ**.\n\n### Handling Invalid Requests\n- If a low-layer communication module receives a **CM_AMP_MAP.REQ** with invalid content, it shall ignore the request. Content that deviates from the defined message structure in Table A.9 is considered invalid.\n\n---\n\n## Conclusion\n\nThe **CM_AMP_MAP.REQ** message plays a crucial role in the amplitude map exchange process between EVs and EVSEs, allowing for the adjustment of transmission power for specific carriers. This exchange is essential for ensuring efficient communication and compliance with local regulations regarding power transmission. The structured format of the message and the requirement for confirmation help maintain the integrity and reliability of the communication process.",
    "What is CM_VALIDATE.CNF?": "# Overview\n\n**CM_VALIDATE.CNF** is a message used in the validation process of matching decisions between Electric Vehicles (EVs) and Electric Vehicle Supply Equipment (EVSE). This process is essential for confirming the connection between an EV and an EVSE based on signal strength measurements. The validation process consists of two parts: the first request-response (CM_VALIDATE.REQ and CM_VALIDATE.CNF) and the second request-response (step 2 CM_VALIDATE.REQ and CM_VALIDATE.CNF). Each part has distinct contents and purposes, ensuring that the EV can accurately determine the correct EVSE to connect to.\n\n# Validation Process\n\n## Functional Description\n\nThe validation of the matching decision is a method to validate the SLAC-based matching through the control pilot line. If the EV cannot make a distinct matching decision based on signal strength measurements, it may initiate an additional validation process. This process is divided into two parts:\n\n1. **First Request-Response**: \n   - The EV sends a **CM_VALIDATE.REQ** message to the EVSE, which includes a timer value of zero and a result field indicating \"ready.\"\n   - The EVSE responds with a **CM_VALIDATE.CNF** message, which may contain a result field indicating its readiness to perform the validation.\n\n2. **Second Request-Response**:\n   - The EV sends a step 2 **CM_VALIDATE.REQ** indicating \"ready.\"\n   - The EVSE counts the BCB toggles for a specified time window and responds with a step 2 **CM_VALIDATE.CNF** containing the number of toggles counted and a result field indicating success or failure.\n\n## Message Definitions\n\n### First Request-Response (CM_VALIDATE)\n\n- **CM_VALIDATE.REQ**:\n  - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n  - **Timer**: Set to zero in the first request.\n  - **Result**: Set to 0x01 (ready).\n\n- **CM_VALIDATE.CNF**:\n  - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n  - **ToggleNum**: Set to zero in the first response.\n  - **Result**: Variable, indicating the state of the EVSE (e.g., \"Not Ready,\" \"Ready,\" \"Success,\" \"Failure,\" \"Not Required\").\n\n### Second Request-Response (CM_VALIDATE)\n\n- **CM_VALIDATE.REQ**:\n  - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n  - **Timer**: Variable value indicating the duration for the EVSE to listen to BCB toggles.\n  - **Result**: Set to 0x01 (ready).\n\n- **CM_VALIDATE.CNF**:\n  - **Signal Type**: Fixed value indicating \"PEV S2 toggles on control pilot line.\"\n  - **ToggleNum**: Variable, indicating the number of BCB edges detected.\n  - **Result**: Variable, indicating the outcome of the toggle process (e.g., \"Success,\" \"Failure\").\n\n## Process Flow\n\n1. **Initiation**: The EV initiates the validation process by sending a **CM_VALIDATE.REQ** with a timer value of zero.\n2. **Response**: The EVSE responds with a **CM_VALIDATE.CNF** indicating its readiness or inability to perform the validation.\n3. **Toggle Sequence**: If the EVSE is ready, the EV sends a step 2 **CM_VALIDATE.REQ** to start the toggle sequence.\n4. **Counting Toggles**: The EVSE counts the BCB toggles for the duration specified in the request.\n5. **Final Confirmation**: The EVSE sends a step 2 **CM_VALIDATE.CNF** with the count of toggles and the result of the validation.\n\n## Conditions for Validation\n\n- If the EVSE is busy or unable to perform the validation, it will respond with \"not ready\" or \"failure.\"\n- If the validation is successful, the EV will compare the number of toggles counted with the expected number to confirm the connection.\n- If the validation fails or the EV does not receive a valid response, it will continue the process with the next potential EVSE.\n\n# Related Topics\n\n## Signal Strength Measurement\n\nThe signal strength measurement is a critical step in determining which EVSE nodes are available for connection. The EV measures the attenuation of signals from various EVSEs and uses this information to decide which one to connect to.\n\n## Timing and Constants\n\nThe validation process involves specific timing parameters that dictate how long the EV and EVSE should wait for responses and how long the toggle sequences should last. These timings ensure that the validation process is efficient and reliable.\n\n### Key Timing Parameters\n\n- **TP_EV_vald_toggle**: Duration of the BCB-Toggle sequence.\n- **TT_EVSE_vald_toggle**: Timeout for the EVSE to stop monitoring control pilot for BCB-Toggle.\n- **TP_match_response**: General performance time for a response to a request.\n\n# Conclusion\n\nThe **CM_VALIDATE.CNF** message plays a vital role in the validation process of matching decisions between EVs and EVSEs. By facilitating a structured request-response mechanism, it ensures that the EV can accurately confirm its connection to the appropriate EVSE, thereby enhancing the reliability of the Vehicle-to-Grid communication process."
}