Question: What is the system architecture of Vehicle-to-Grid communication?

Answer: Overview  
Vehicle‑to‑Grid (V2G) communication between an electric vehicle (EV) and electric vehicle supply equipment (EVSE) is defined by the ISO 15118 series using a layered, OSI‑based architecture. The system is divided into three complementary parts:  
• ISO 15118‑3 (physical and data link layers)  
• ISO 15118‑2 (network to application layers)  
• ISO 15118‑1 (general information and use‑case definitions)  

This separation ensures clear boundaries, modularity, and interoperability from the raw bitstream on the power line up to the high‑level charging and energy‑management services.

1. ISO 15118 Series and OSI Mapping  
Figure 1 (Overview of ISO 15118 in the ISO/IEC OSI reference model) places the three parts of ISO 15118 within the classic seven‐layer OSI model:  

  • Layers 1–2 (Physical, Data Link)  
    ↳ Defined in ISO 15118‑3  
  • Layers 3–7 (Network, Transport, Session, Presentation, Application)  
    ↳ Defined in ISO 15118‑2  
  • Use‑case definitions and background  
    ↳ Defined in ISO 15118‑1  

A horizontal band labeled “V2G standardized service primitive interface” separates and connects the lower layers (ISO 15118‑3) from the higher layers (ISO 15118‑2).

2. Physical and Data Link Layers (ISO 15118‑3)  
ISO 15118‑3 specifies the requirements for OSI Layers 1 and 2, including two parallel paths:  

  2.1 OSI Layer 1 – Physical  
    • Power‑Line Communication (PLC) physical specifications (e.g., HomePlug Green PHY or G3‑PLC)  
    • Electromagnetic compatibility, signal coupling onto the AC/DC cable  
    • Control‑pilot hardware I/Os (IEC 61851‑1 PWM line)  

  2.2 OSI Layer 2 – Data Link  
    • PLC MAC layer (carrier sense, framing, addressing)  
    • Convergence layer (adapts PLC MAC to generic data‑link services)  
    • Service Access Points (SAPs)  
      – MAC/PHY SAP: interface between PHY and MAC  
      – Convergence MAC SAP: interface between MAC and convergence layer  
      – Control SAP / Data‑link control SAP: for key management, link status, encryption, SLAC  
      – Data SAP: passes V2G payloads up to the network layer  

  2.3 Connection Coordination  
    • Manages logical link establishment and teardown  
    • Coordinates basic IEC 61851‑1 pilot signaling (presence, current limit) with PLC link setup  

3. V2G Standardized Service Primitive Interface  
Between ISO 15118‑3 and ISO 15118‑2 lies the “V2G standardized service primitive interface.” It defines:  
  • Service primitives (requests, indications, confirmations) for data transfer  
  • Connection management primitives (establish, release, status)  
  • Abstraction of lower‑layer details so that the higher‑layer protocol stack can remain unchanged if the PHY/MAC implementation varies  

4. Network to Application Layers (ISO 15118‑2)  
ISO 15118‑2 spans OSI Layers 3 through 7, defining how the EV and EVSE exchange, secure, and interpret V2G messages:

  4.1 OSI Layer 3 – Network  
    • IP addressing, routing, and packet forwarding requirements  

  4.2 OSI Layer 4 – Transport  
    • Reliable or unreliable data delivery (e.g., TCP/UDP configurations)  

  4.3 OSI Layer 5 – Session  
    • Session initiation, maintenance, and termination for charging dialogues  

  4.4 OSI Layer 6 – Presentation  
    • Data formatting, compression (e.g., EXI), encryption, and decryption rules  

  4.5 OSI Layer 7 – Application  
    • High‑level V2G services: Plug‑and‑Charge (PnC), contract certificate exchange, authentication, charging schedules, pricing, energy management, and bidirectional power flow protocols  

5. Use‑Case Definition (ISO 15118‑1)  
ISO 15118‑1 is not tied to a specific OSI layer but provides:  
  • General information and terminology  
  • V2G use‑case definitions (e.g., AC/DC charging, PnC, External Identification Means)  
  • System objectives and concepts that underlie the protocol requirements in Parts 2 and 3  

Key Takeaways  
• Layered separation (ISO 15118‑3 vs. ISO 15118‑2) allows independent evolution of hardware (PHY/MAC) and software (network/app) components while preserving a stable interface.  
• The standardized service primitive interface ensures modularity and interoperability across different manufacturer implementations.  
• ISO 15118‑1, ‑2, and ‑3 collectively cover the full stack—from the physical injection of PLC signals and control‑pilot integration up to the XML/EXI messages governing charging and Vehicle‑to‑Grid services.

================================================================================

Question: What is HPGP?

Answer: Overview  
HPGP (HomePlug Green PHY) is the Power Line Communication (PLC) physical‑layer technology used in ISO 15118‑3 to carry bidirectional data between an Electric Vehicle Supply Equipment (EVSE) and an Electric Vehicle (EV) over the 1 kHz control‑pilot line. It leverages a subset of the HomePlug Green PHY specification—identical in modulation and frequency plan except for tailored signal coupling, amplitude levels, and carrier usage—to enable secure, low‑power vehicle‑to‑grid communication on the existing pilot conductor.

1. Symbols and Abbreviated Terms  
   • HPGP: HomePlug Green PHY  
   • PLC: Power Line Communication  
   • EVSE: Electric Vehicle Supply Equipment  
   • EV: Electric Vehicle  
   • PE: Protective Earth (ground)  

2. Signal Coupling for HomePlug Green PHY (Clause A.11)  
   2.1 Overview  
     – This clause defines requirements for injecting HPGP signals in parallel onto the control‑pilot line (between CP and earth) so that both EVSE and EV each host a dedicated Green PHY modem pair.  
     – The resulting wave on the pilot conductor is the algebraic sum of the ±12 V, 1 kHz PWM pilot signal (per IEC 61851) and the superimposed HPGP high‑frequency carriers.  
     – While HPGP modulation and carriers remain per [HPGP], coupling circuit values and permissible signal levels are adapted for the control‑pilot environment.  
   2.2 Key Design Considerations  
     – Treat the pilot conductor plus protective‑earth return as a transmission line at HPGP frequencies (1.8–30 MHz).  
     – Minimize direct capacitive shunt from pilot to earth; most HF isolation is provided by an inductor (L) in series with a damping resistor (R­damp).  
     – Partition the total capacitive load (EVSE side, EV side, cable assembly) per detailed values below.  

3. General Injection Drawing (Figure A.10)  
   The parallel‑injection schematic comprises two mirror‑image sections—EVSE and EV—each hosting:  
     – Low‑frequency pilot path: oscillator (±12 V, 1 kHz) → series R1 → C_S → pilot contact → EV front‑end (R2, R3, S2) → measurement of duty cycle/frequency.  
     – High‑frequency path: pilot line ↔ series L + R­damp ↔ coupling capacitor C_PLC ↔ Green PHY modem ↔ earth.  
   Figure A.10 elements:  
     • Key 1: Voltage measurement on the pilot line (EVSE side)  
     • Key 2: ±12 V, 1 kHz oscillator (pilot generator)  
     • Key 3: Pilot contact (cable coupler)  
     • Key 4: PE (earth) reference  
     • Key 5: Green PHY modem blocks (both sides)  
     • Key 6: Duty‑cycle/frequency measurement (EV side)  

4. Signal Requirements for HPGP Injection (Section A.11.3 and Table A.11)  
   Table A.11 defines the electrical characteristics for parallel injection. Key parameters (typical unless noted) are:  
     • Length of cable assembly: max 10 m  
     • C_PLC (coupling capacitor): 1.35 nF  
     • R­damp (damping resistor): 220 Ω (max 1 kΩ)  
     • L (inductor): 220 µH  
     • C_S, C_V (IEC‑defined pilot capacitors): see IEC 61851‑1 Annex A  
     • Power Spectral Density (1.8–30 MHz, RBW = 9 kHz, 50 Ω): –75 dBm/Hz (typ) to –73 dBm/Hz (max)  
     • Peak‑to‑peak voltage of HPGP carriers at pilot terminals: 1.3 Vpp  
     • Conducted crosstalk to mains (2–28 MHz, any live/neutral vs. PE/CP): ≤ –40 dB  

   Notes:  
     1. Capacitance between pilot and earth should be as small as practicable to avoid excessive HF attenuation.  
     2. Peak‑to‑peak limits derive from the PSD specification under worst‑case injection impedance.  
     3. Maximum values follow IEC 61851‑1 Annex A and apply only to parallel‑injection topologies per Figure A.10.  
     4. Measurement methods for PSD are detailed in ISO 15118‑3 A.9.4.2.

================================================================================

Question: What is SLAC?

Answer: Overview  
SLAC (Signal Level Attenuation Characterization) is a low‑layer communication procedure defined for HomePlug Green PHY–based Power Line Communication (PLC) in ISO 15118‑3. It provides a standardized protocol by which an Electric Vehicle (EV) and Electric Vehicle Supply Equipment (EVSE) measure and exchange signal strength (attenuation) data to identify and match directly connected PLC nodes before higher‑layer communication begins.

1. Definition  
• SLAC: Signal Level Attenuation Characterization  
• Purpose: Protocol to measure the signal strength of a PLC link between HomePlug Green PHY stations (EV ↔ EVSE), as specified in ISO 15118‑3 and in the HomePlug Green PHY (HPGP) specification.

2. Functional Description  
• Matching EV – EVSE Process (Clause A.9.2)  
  – The EV must discover which EVSE nodes are directly connected.  
  – The EVSE measures the attenuation of PLC signals received from the EV across multiple OFDM carrier groups and reports the measurements back to the EV.  
  – Based on the reported attenuation profiles, the EV selects the correct EVSE (directly connected node).  
• Method: The SLAC procedure defined in the HomePlug Green PHY standard is used (A.9.2.1).

3. SLAC Sequence (Figure A.4)  
• Before SLAC starts, the EV and EVSE exchange SLAC parameters (CM_SLAC_PARM.REQ/RESP).  
• EV sends C_EV_start_atten_char_inds times the broadcast message CM_START_ATTEN_CHAR.IND.  
• EV then transmits a series of “M‐SOUNDS” (C_EV_match_MNBC count).  
• EVSE uses the received M‐SOUNDS to calculate per‑group attenuation and unicasts the results in CM_ATTEN_CHAR.IND messages.  
• EV confirms each CM_ATTEN_CHAR.IND by sending CM_ATTEN_CHAR.RSP.  
• The SLAC exchange concludes when the EVSE sends CM_ATTEN_PROFILE.IND carrying the averaged attenuation for all carrier groups.

4. Timing and Compliance Requirements  
• All low‑layer communication modules (both EV and EVSE) shall comply with the timing and constant values in Table A.1 (ISO 15118‑3, [V2G3‑A08‑01]).  
• Number of matching retries, timeouts, and per‑state durations (e.g., T_step_EF for Control Pilot) are defined in the Timings and Constants clause (see ISO 15118‑3 Table A.1).

5. Description of Involved MMEs (Management Message Entries)  
According to ISO 15118‑3 [V2G3‑A09‑23], the low‑layer communication module shall use the following MMEs as defined in Figure A.1 and parameterized per Table A.4:

  5.1 CM_START_ATTEN_CHAR.IND (Broadcast)  
    – APPLICATION_TYPE = 0x00 (“PEV‑EVSE Matching”)  
    – SECURITY_TYPE  = 0x00 (“No Security”)  
    – NUM_SOUNDS    = C_EV_match_MNBC  
    – Time_Out      = TT_EVSE_match_MNBC  
    – RESP_TYPE     = 0x01 (“other Green PHY station”)  
    – FORWARDING_STA = EV Host MAC address  
    – RunID         = Matching run identifier (from CM_SLAC_PARM.REQ)

  5.2 CM_MNBC_SOUND.IND (Broadcast)  
    – SECURITY_TYPE = 0x00  
    – SenderID      = 17‐octet source address  
    – Cnt           = Remaining M‐Sound count  
    – RunID         = Same RunID as in SLAC parameter exchange  
    – Rnd           = Random value for link characterization

  5.3 CM_ATTEN_CHAR.IND (Unicast from EVSE to EV)  
    – SOURCE_ADDRESS = EV Host MAC  
    – RunID          = Same RunID  
    – NumSounds      = Number of M‐Sounds used  
    – ATTEN_PROFILE  = Array of per‑group attenuation values  
      • ATTEN_PROFILE format follows HPGP specification’s “ATTEN_PROFILE” field.

  5.4 CM_ATTEN_CHAR.RSP (Unicast from EV to EVSE)  
    – Indicates successful receipt of each CM_ATTEN_CHAR.IND  
    – APPLICATION_TYPE = 0x00, SECURITY_TYPE = 0x00  

  5.5 CM_ATTEN_PROFILE.IND  
    – PEV MAC         = EV Host MAC  
    – NumGroups       = 0x3A (58 OFDM carrier groups)  
    – AAG[1…58]       = Average attenuation per group  

• Ethernet Destination MAC Address:  
  – Filled as Broadcast or Unicast per Table A.4 ([V2G3‑A09‑24]).

6. Attenuation Processing and Matching Decision  
• Within CM_ATTEN_CHAR.IND, the EVSE corrects measured attenuation by adding back its receive‑path insertion loss (AttnRxEVSE) before reporting.  
• EV computes Average_Attenuation by the arithmetic (or weighted) mean of all group attenuations ([V2G3‑A09‑20]). The sum of weights (if used) must equal one.  
• EV sets EV_Discovery_Status according to Table A.3:  
  – EVSE_FOUND: Average_Attenuation < C_EV_match_signal‑attn_direct  
  – EVSE_POTENTIALLY_FOUND: C_EV_match_signal‑attn_direct ≤ Average_Attenuation ≤ C_EV_match_signal‑attn_indirect  
  – EVSE_NOT_FOUND: Average_Attenuation > C_EV_match_signal‑attn_indirect  
• Based on EV_Discovery_Status, the EV continues with either A.7.4 (EVSE_FOUND), A.7.3 (potentially found), or fails the matching process (EVSE_NOT_FOUND).

References  
– ISO 15118‑3, First edition 2015‑05‑15, Clause A.9.2 “Signal strength measurement”  
– HomePlug Green PHY (HPGP) specification for SLAC message formats and sequence  
– Table A.1 (Timing and constant values) and Table A.4 (MME parameter definitions)

================================================================================

Question: What is Logical Network?

Answer: Overview  
A logical network (ISO 15118‑3 clause 3.16) is a layer‑2 construct in the V2G (Vehicle‑to‑Grid) low‑layer communication that groups all stations sharing the same Network Membership Key (NMK). Only members of the same logical network can exchange encrypted payload data and are visible to each other at higher layers. Multiple logical networks may coexist on the same physical medium to achieve network segmentation.

1. Definition and Characteristics  
  1.1 Definition (ISO 15118‑3 3.16)  
    – A set of low‑layer communication stations which use the same network key.  
  1.2 Notes  
    – Only members of the same logical network can exchange encrypted payload data and are visible to each other on higher layers.  
    – Different logical networks can exist on the same physical media simultaneously (used for segmentation).  
    – A logical network is defined for OSI layer 2 (data link layer).

2. Logical Network Parameter Exchange  
  2.1 Creation of the Logical Network  
    – Both EV and EVSE use CM_SLAC_MATCH MMEs (as defined in [HPGP], clauses per Figure A.1) to perform the matching handshake. [V2G3‑A09‑91]  
    – After the EV has made its matching decision, it sends CM_SLAC_MATCH.REQ to the selected EVSE. The EVSE replies with CM_SLAC_MATCH.CNF containing all parameters required to join its logical network.  
  2.2 NMK Configuration on EVSE  
    – When an EVSE switches to a private logical network, it must set its local NMK to a random value to ensure uniqueness. Configuration is done by sending CM_SLAC_MATCH.CNF or at any time before matching. [V2G3‑A09‑92]  
  2.3 NID Derivation  
    – The Network Identifier (NID) is derived from the NMK according to [HPGP] clause 4.4.3.1, using a security level value of 0b00. [V2G3‑A09‑93]

3. Joining Sequence  
  – Refer to Figure A.7 (“Sequence chart of joining the logical network”) in clause A.9.5.3 for the timing and MME exchanges involved in creating and confirming membership in the logical network.

4. Leaving the Logical Network  
  4.1 Leave Conditions and Actions  
    – In specified cases (e.g., loss of link, explicit leave request), the communication node must leave the logical network within TP_match_leave. Upon leaving:  
      • All low‑layer link parameters revert to default.  
      • The status changes to “Unmatched.” [V2G3‑M09‑19]  
    – Upon leaving, the low‑layer module shall inform the High‑Layer Entity (HLE) via D-LINK_READY.indication (no link). [V2G3‑M09‑18]  
  4.2 Timing Constraint  
    – TP_match_leave: maximum time to leave the logical network = 1 s. [Table 3]

5. Relevant Table and Figure  
  Table 3 — Timing and constant values (excerpt relevant to logical network)  
    Parameter       | Description                             | Max | Unit  
    --------------- | --------------------------------------- | --- | ----  
    TP_match_leave  | Maximum time to leave the logical network | 1   | s  

  Figure A.7 — Sequence chart of joining the logical network (see A.9.5.3)

================================================================================

Question: What is CCo?

Answer: Overview  
CCo (Central Coordinator) is the logical entity in a HomePlug Green PHY (HPGP) power‑line communication (PLC) network that assumes the managerial role. Defined in ISO 15118‑3 (“Road vehicles — Vehicle to grid communication interface — Part 3: Physical and data link layer requirements”), the CCo is responsible for controlling medium access and coordinating network activities between the Electric Vehicle Supply Equipment (EVSE) and the Electric Vehicle (EV).

1. Definition  
  1.1 Abbreviation  
    • CCo: Central Coordinator (see Text 1)  
  1.2 Term (ISO 15118‑3 Clause 3.2)  
    • central coordinator: manager of a HomePlug Green PHY network (see Text 2)

2. Role in the HPGP Network  
  • The CCo controls MAC‑level arbitration and network management within the single‐EVSE‑to‑single‑EV PLC segment injected over the control pilot line (see Text 6).  
  • Only one device in the PLC network may assume the CCo role at any time.  

3. Configuration Requirements (ISO 15118‑3 Annex A.6.5.2)  
  3.1 EVSE Side  
    – The low‑layer communication module on the EVSE side shall be configured to always be the CCo (V2G3‑A06‑03, Text 4).  
  3.2 EV Side  
    – The low‑layer communication module on the EV side shall be configured to never become the CCo (V2G3‑A06‑02, Text 3).  
  3.3 Precondition for Matching  
    – This CCo mode configuration is required before entering the SLAC‐based matching process between EVSE and EV (Related Info 9).  
  3.4 Priority Considerations  
    – To speed up matching, all matching‐related frames shall use CAP3 priority (V2G3‑A06‑04, Related Info 12).  
    – The EV side shall not respond to certain management messages (MMEs) reserved for CCo activities (e.g. CM_SLAC_PARM.REQ, CM_START_ATTEN_CHAR.IND, etc.; V2G3‑A06‑05, Related Info 12–14).

4. Related Primitives and Services  
  • APCM_SET_CCo.REQ: Primitive defined in the “Control SAP Service” clause of the HomePlug Green PHY specification ([HPGP]) that commands a device to enter CCo mode (Text 5).

5. Signal Injection Context (ISO 15118‑3 Annex A.11)  
  • HomePlug Green PHY signals are injected onto the control pilot line to enable bidirectional PLC between one EVSE and one EV (Text 6).  
  • Although compliant with [HPGP] in terms of protocol framing, the signal coupling, levels, and carrier usage differ to suit the control pilot environment (Related Info 16–19).

References  
  Text 1: Symbol list, ISO 15118‑3.  
  Text 2: Term “central coordinator,” Clause 3.2, ISO 15118‑3.  
  Text 3–5: Annex A.6.5.2 Functional description, ISO 15118‑3.  
  Text 6: Annex A.11 Overview, ISO 15118‑3.

================================================================================

Question: What is the difference between Data SAP and Data link control SAP?

Answer: Overview  
ISO 15118‑3 defines two distinct Service Access Points (SAPs) at the top of the Data Link layer:  
• Data SAP – the channel for carrying Vehicle‑to‑Grid (V2G) payloads up into Layer 3 and above.  
• Data Link Control SAP – the interface for link‑management services (status, errors, control) between the low‑level PLC link technology and the Connection Coordination module.

1. Data SAP  
Definition  
• According to clause 3.10, the Data SAP is “the service access point that defines the interface between layer 2 and layer 3 for exchange of V2G‑related payload.”  
• In HomePlug Green PHY (HPGP) implementations, the Data SAP is functionally identical to an Ethernet‑II class SAP (the “ETH SAP”), completely covered by the HPGP specification (see A.6.1.2).

Location in the Stack  
• As shown in Figure 2 ([ISO‑3] relationship to the OSI model), the Data SAP sits above the Data Link layer and below the Network layer (e.g. IPv6).  
• It carries all high‑level charging messages defined in ISO 15118‑2 (session negotiation, XML/EXI payloads, security traffic).

Key Characteristics  
• Transports unmodified Layer 3 PDUs (packets) into/from the PLC MAC/PHY.  
• Provides a standardized “Ethernet‑style” interface (frame format, addressing) to higher‑layer protocols.  
• Fully managed by the Convergence layer to present an IEEE 802.3–like view to the network stack.

2. Data Link Control SAP  
Definition  
• According to clause 3.9, the Data Link Control SAP is “the service access point which defines the interface between the Connection Coordination module and the low‑layer communication technology for managing the link status.”  
• Clause 12.1 further clarifies that the Data Link Control SAP “provides link status information, error information, control functionality and is located between the Connection Coordination entity and higher layers.”

Location in the Stack  
• In Figure 2, the Data Link Control SAP resides alongside the Control SAP and above the Convergence layer, connecting the PLC MAC/PHY to the Connection Coordination functional block.  
• It does not carry application data; instead, it conveys link‑management primitives.

Key Characteristics  
• Reports link‑up/link‑down events (D‑LINK_READY.indication – see Table 4).  
• Allows Connection Coordination to request link termination (D‑LINK_TERMINATE.request – Table 5), error‑induced recovery (D‑LINK_ERROR.request – Table 6), or power‑save pause (D‑LINK_PAUSE.request – Table 7).  
• Delivers error codes and status to higher layer logic for orchestrating PLC sessions and Control Pilot coordination.

3. Comparative Summary  

| Aspect                    | Data SAP                                             | Data Link Control SAP                                    |
|---------------------------|------------------------------------------------------|----------------------------------------------------------|
| Primary Role              | Exchange of V2G payload (ISO 15118‑2 messages)       | Exchange of link‑status and control primitives           |
| Interface With            | Layer 3 (Network) / Transport / Application layers   | Connection Coordination module                           |
| Example SAP Name          | ETH SAP (Ethernet‑II class frame interface)          | D‑LINK_READY.indication, D‑LINK_TERMINATE.request, etc.  |
| Governed by               | Convergence layer / PLC MAC for payload forwarding   | Connection Coordination / Data Link layer primitives     |
| Carries                   | User‑level data packets (IP, XML, EXI, etc.)         | Link status changes, error notifications, control commands |

4. Relevant Primitives (Data Link Control SAP)  
• D‑LINK_READY.indication: Notifies EV/EVSE of link status changes (“no link” ↔ “link established”).  
• D‑LINK_TERMINATE.request: Commands lower layers to tear down the data link.  
• D‑LINK_ERROR.request: Requests an error‑triggered re‑initiation via Control Pilot transition to state E.  
• D‑LINK_PAUSE.request: Instructs lower layers to enter power‑saving mode while retaining “matched” link state.

5. Conclusion  
Although both SAPs sit at the top of ISO 15118‑3’s Data Link layer, they serve entirely different purposes. The Data SAP is the high‑throughput “pipe” for all V2G communication payloads up to IP/ISO 15118 messaging, whereas the Data Link Control SAP handles the lifecycle and status of that pipe, exposing link events and control operations to the Connection Coordination logic.

================================================================================

Question: What is the difference between basic signalling and high-level communication?

Answer: Overview  
Basic signalling and high‑level communication (HLC) are two complementary layers of protocol used between an electric vehicle (EV) and the electric vehicle supply equipment (EVSE). Basic signalling provides the fundamental, bidirectional exchange of status and control information via the control pilot line, as defined in IEC‑1. High‑level communication is an additional, digital data link (according to ISO‑2) that runs on top of basic signalling to enable richer, bidirectional feature sets—especially for vehicle‑to‑grid (V2G) applications.

1. Basic Signalling  
1.1 Standard Compliance  
  • Defined by IEC‑1.  
  • All timings and signal definitions must comply with IEC‑1 and its Annex A ([V2G3‑M06‑01]).  

1.2 Signal Mechanism  
  • Bidirectional signalling over the control pilot line.  
    – EV → EVSE: communicated via discrete control‑pilot states.  
    – EVSE → EV: communicated via the duty cycle (pulse‑width modulation) of the control‑pilot signal.  
  • Used in every charging process, regardless of whether HLC is present ([Text 2]).  

1.3 Functional Scope  
  • Provides basic vehicle presence detection, charging authorization, and current‑limit negotiation.  
  • In case of HLC failure or unavailability, basic signalling can serve as a backup charging mode.  

2. High‑Level Communication (HLC)  
2.1 Purpose and Relationship to Basic Signalling  
  • Employed in addition to basic signalling to enable a full, secure, bidirectional digital data exchange and to offer additional services such as advanced metering, tariff negotiation, and dynamic grid management ([V2G3‑M06‑02]).  

2.2 Protocol and Data Exchange Sequence  
  • Based on the ISO‑2 communication protocol.  
  • All message exchanges during an HLC‑based charging session follow ISO‑2 framing, addressing, and transport rules ([Text 4]).  

2.3 Operational Phases  
  The HLC exchange is organized into three sequential periods:  
  • Data Link Setup  
  • V2G Setup  
  • V2G Charging Loop  
  (Detailed descriptions of these periods are given in ISO‑2.)  

2.4 Interaction with PWM Duty Cycle  
  • During the V2G charging loop, the PWM duty cycle on the control pilot must remain fixed; any dynamic grid constraints are conveyed by HLC messages ([V2G3‑M06‑03]).  
  • If basic signalling is used as a fallback (for example, when HLC‑C fails), the PWM duty cycle may change dynamically to reflect grid limitations per IEC‑1 requirements ([Related Info 10]).

================================================================================

Question: What is the difference between MTC and PTC?

Answer: Overview  
In the ISO 15118‑5 TTCN‑3 conformance‑test architecture, two kinds of test components are defined—Main Test Component (MTC) and Parallel Test Component (PTC). Together they exercise and verify a System Under Test (SUT, either an EVCC or an SECC) by generating stimuli, observing behavior, and producing a pass/fail verdict.

1. Main Test Component (MTC)  
   1.1 Definition (ISO 15118‑5, clause 3.12)  
     • A single, top‑level TTCN‑3 component in each test configuration.  
     • Responsible for creating and controlling one or more PTCs.  
     • Hosts the test configuration (ports, timers, variables, constants) that defines the test case.  
     • Computes and assigns the overall test verdict.  
   1.2 Key Characteristics  
     – Contains the TTCN‑3 test configuration and “lifeline” that bounds the execution of the test.  
     – Owns ports for SLAC (Signal Level Attenuation Characterization) messages and HAL_61851 signaling.  
     – May assign timers or variables to keep dynamic state.  
     – Two concrete MTC types (from Table 4 of ISO 15118‑5, clause 7.3.2):  
       • SECC_Tester (when the SUT is an SECC)  
       • EVCC_Tester (when the SUT is an EVCC)  
     – Interacts with the SUT via mapped ports (e.g. pt_SLAC_Port, pt_HAL_61851_Port).  

2. Parallel Test Component (PTC)  
   2.1 Definition (ISO 15118‑5, clause 3.13)  
     • A helper test component instantiated by the MTC.  
     • Focused on a specific subtask, such as continuously monitoring the IEC 61851‑1 control‑pilot signaling.  
     • Does not host its own timers or variables for lifeline; relies on the MTC for configuration and verdict coordination.  
   2.2 Key Characteristics  
     – Implements specialized observation or stimulus in parallel to the MTC’s main logic.  
     – One standard PTC example (Table 4 of clause 7.3.2): HAL_61851_Listener.  
       • Monitors PWM duty cycle, frequency, voltage state, and proximity‑resistor values as per IEC 61851‑1.  
       • Communicates with the MTC over the HAL_61851_Internal_Port.  
     – Remains active for the lifetime of the test case, reporting events or mismatches back to the MTC.  

3. Component‑Port Interaction  
   • The MTC and PTC are connected by an internal port (pt_HAL_61851_Internal_Port) that is not exposed to the Test System Interface (TSI).  
   • All other ports (pt_SLAC_Port, pt_HAL_61851_Port, pt_HAL_61851_Listener_Port) map directly to corresponding TSI ports so that the real test hardware or emulator is driven consistently.  

Comparison Summary  
– The MTC is the “master” component that defines the test scenario, allocates resources (timers, variables, verdict handling), and drives overall control.  
– The PTC is a “worker” component, created and overseen by the MTC, whose sole purpose is to run a specialized sub‑procedure (e.g., IEC 61851‑1 PWM monitoring) in parallel and feed its observations back to the MTC.

================================================================================

Question: What is ATS?

Answer: Overview  
The Abstract Test Suite (ATS) is the formal set of abstract test cases defined in ISO 15118‑5 (Part 5) for verifying the physical and data link layers (PLC‑based High Level Communication and Basic Signaling) of a System Under Test (SUT), which may be an Electric Vehicle Communication Controller (EVCC) or Supply Equipment Communication Controller (SECC). The ATS checks both the observable static capabilities and the dynamic behaviors of a SUT against the conformance requirements of ISO 15118‑3.

1. Definition and Composition  
• According to clause 3.2, the ATS is “a test suite composed of abstract test cases.”  
• It comprises two types of tests:  
  – Capability tests: verify that the SUT’s observable capabilities comply with the static requirements in ISO 15118‑3.  
  – Behavior tests: exercise the SUT over the full range of dynamic requirements in ISO 15118‑3 and within the declared capabilities of the SUT.  

2. Scope and Objectives  
• Scope (clause 1): The ATS covers the ISO 15118‑3 normative sections and requirements relevant to PLC‑based communication. It does not assess performance, robustness, reliability, or physical implementation details, nor does it consider power flow.  
• Objective: Increase confidence that different implementations interwork by detecting errors through protocol conformance testing. While exhaustive coverage is not feasible, the ATS raises the probability of interoperation.  

3. Test Architecture and Standards  
• Test architecture: Conformance cases for OSI Layers 1–2 are specified in TTCN‑3 Core Language. Network‑layer and higher tests appear in ISO 15118‑4.  
• Standard References: Tests validate requirements in ISO 15118‑3, referencing external standards only when technically necessary (e.g., IEEE 1901.2 G3‑PLC).  

4. Test Suite Coverage  
Clause 7.5 defines coverage of ISO 15118‑3 requirements by the ATS, summarized in dedicated tables:  
  – Table 27: Requirements out of scope or untestable in a black‑box configuration.  
  – Table 28: Requirements implicitly covered by the SUT adapter/codec.  
  – Table 29: Requirements actually covered, using symbols:  
   X = Covered by one or more ATS test cases  
   I = Indirectly covered but associated with test cases  
   P = Partially covered  
   N = Not testable for the profile  
   – = Not applicable  
   O = Out of scope for the profile  
  – Table 30: Groupings of requirements for simplified TC identifier representation.  

5. Protocol Implementation Conformance Statement (PICS)  
• Purpose (clause 7.3.3): A PICS declares which capabilities and options an implementation provides or omits, so tests apply only to relevant requirements (cf. ITU‑T X.290).  
• All PICS used by the ATS are listed in Tables 6–8, defining flags such as:  
  – PICS_CMN_ChargingMode (AC or DC)  
  – PICS_CMN_IdentificationMode (EIM or PnC)  
  – PICS_CMN_CMN_CombinedTesting (enables SLAC association and V2G messaging)  
  – PICS_SECC_CMN_EIMDone (when to initiate EIM authorization)  
  – PICS_EVCC_CMN_PmaxSchedulewithZeroPow (enables P‑max = 0 schedule for pause)  

6. Protocol Implementation eXtra Information for Testing (PIXIT)  
• Purpose (clause 7.3.4): PIXIT are messages or parameters that instruct the SUT to expose specific internal behaviors, ensuring testability of certain requirements.  
• Key PIXIT selections are in Tables 9–11, for example:  
  – PIXIT_CMN_CMN_CmAmpMap: request explicit Amplitude Map testing  
  – PIXIT_SECC_CMN_CmValidate: control SECC validation process  
  – PIXIT_EVCC_CMN_CmValidate: trigger EVCC validation with manipulated profiles  
  – PIXIT_AC_ConnectionLossHandling: specify how the SUT handles PLC connection loss  

7. Abbreviations and Symbols  
For clarity within the ATS documentation, the following apply (clause 4):  
  – ATS: Abstract Test Suite  
  – EVCC: Electric Vehicle Communication Controller  
  – SECC: Supply Equipment Communication Controller  
  – PICS: Protocol Implementation Conformance Statement  
  – PIXIT: Protocol Implementation eXtra Information for Testing  
  – PLC: Power Line Communication  
  – HLC: High Level Communication  
  – EIM: External Identification Means  
  – PnC: Plug and Charge  
  – SLAC: Signal Level Attenuation Characterization  
  – SUT: System Under Test  
  – TC: Test Case  
  – TTCN‑3: Testing and Test Control Notation version 3

================================================================================

Question: What is TSS?

Answer: Overview
The Test Suite Structure (TSS) defines how conformance tests for the physical and data‑link layers (ISO 15118‑3) are organized, grouped, and executed. It specifies the hierarchy of functions, test cases, modules and annexes needed to fully exercise and verify a System Under Test (SUT)—either an EV Communication Controller (EVCC) or an SECC—against the requirements of ISO 15118‑3.

1. Test Suite Structure (TSS)
1.1 Definition of a Test Suite  
  • A test suite is a complete set of test cases, possibly combined into groups or modules (e.g. AC, DC or common behaviors), necessary to perform conformance testing for a given SUT.  
  • Each test case comprises:
    – Pre‑conditions  
    – Test behavior  
    – Post‑conditions  
  • These elements are encapsulated as individual functions and stored in separate modules.

1.2 Hierarchical Levels  
  Based on Figure 2 (“General overview of the Test Suite Structure (TSS)”):
  • Level 1 (lowest): Functions modules  
     – Pre‑condition functions  
     – Post‑condition functions  
     – Test-behavior functions  
     – Library/utility functions  
  • Level 2: Test cases  
     – Each test case is formed by invoking the appropriate pre‑conditions, then the test‑behavior function, then the post‑conditions.  
  • Above Level 2: Test groups or modules  
     – Groups of test cases organized by use case or domain (e.g. AC charging, DC charging, common behaviors).

2. Test Profiles
2.1 Definition  
  • A test profile defines the configuration and scope of a conformance run.  
  • It consists of:
    – A test configuration  
    – Selection and assignment of PICS (Protocol Implementation Conformance Statement) and PIXIT (Protocol Implementation eXtra Information for Testing)  
    – Definition of test components and ports, per the selected configuration  
    – A test group specifying which test cases to execute and in what sequence to cover a given ISO 15118 use case

3. Identifiers within the TSS
(Extract from Table 1 — Identifiers within the Test Suite Structure)
  • &lt;sut&gt;: System under Test  
     – EVCC: Electric Vehicle Communication Controller  
     – SECC: Supply Equipment Communication Controller  
  • &lt;dom&gt;: Domain  
     – AC: AC‐specific behaviors  
     – DC: DC‐specific behaviors  
     – IN: Inductive charging (reserved for future use)  
     – CMN: Common behaviors  
  • &lt;ctx&gt;: Context (e.g. message pattern or signal name as defined by the standard)

4. Annexes Derived from the TSS
(Extract from Table 2 — Test suite structure — Annexes description)
  • Annex A (Configuration)  
     – Constant definitions (timers, PICS, PIXIT) to be applied throughout the suite  
  • Annex B (Control Part)  
     – Execution order of modeled test cases (test groups), separate for EVCC and SECC  
  • Annex C (Test Cases)  
     – TTCN‑3 test case files, organized by SUT role (EVCC vs. SECC)  
  • Annex D‑E (Functions)  
     – Methods supporting test execution, including pre‑conditions, post‑conditions, test behaviors and common library functions  
  • Annex F (Templates)  
     – TTCN‑3 templates for matching a SUT’s reaction to expected behavior  
  • Annex G (Data Structures)  
     – Data structures required for SLAC testing  

By following this structured approach, the TSS ensures that each test case is clearly defined, repeatable, and traceable back to the underlying ISO 15118‑3 requirements, while test profiles tailor the suite to particular use cases and implementations.

================================================================================

Question: What is EIM?

Answer: Overview  
EIM, or External Identification Means, is one of the two primary authorization methods defined in ISO 15118–3 for electric‐vehicle charging (the other being Plug and Charge, “PnC”). EIM covers any user or contract authentication performed outside the vehicle’s built‑in certificate exchange—for example, via RFID cards or a smartphone app. Once EIM succeeds, the EVSE and EV proceed through defined control‑pilot and communication steps to start charging under either Basic Charging (IEC 61851‑1) or High‑Level Communication (ISO 15118) control.

1. Abbreviation and Definition  
 • EIM  
   – Abbreviated term (ISO 15118‑3, Clause 4) for “External Identification Means.”  
   – Indicates that an EVSE has authenticated the user or contract by an external mechanism before allowing charging.  

2. EIM in Connection Coordination Sequences  
ISO 15118‑3 illustrates multiple “connection coordination” sequences showing when and how EIM can be invoked in AC and DC charging. Each sequence defines:  
 • When EIM completes (before or after the vehicle is plugged in)  
 • Whether the ISO 15118 matching process has already started  
 • The control‑pilot duty‐cycle states applied by the EVSE  
 • The eventual charging mode (Basic Charging or High‑Level Communication)

 Table 1: EIM and/or PnC Implementation on EVSEs  
   (Excerpt from ISO 15118‑3, Clause 7.2)  

   AC EVSE Sequences  
   ┌─────────┬────────────────────────────────────────┬────┬───────────────┬───────────────┬───────────────┐  
   │ Figure  │ Description                            │ PnC│ EIM with BC    │ EIM w/o BC     │ IEC 61851‑1   │  
   ├─────────┼────────────────────────────────────────┼────┼───────────────┼───────────────┼───────────────┤  
   │ Fig 3    │ Seq 1: Matching not started (start with 5 %) │ a) │ b)            │ c)            │ d)            │  
   │ Fig 4    │ Seq 2: Matching not started (start with X1) │ a) │ b)            │ c)            │ d)            │  
   │ Fig 5    │ Seq 3: Matching started (start with 5 %)    │ a) │ b)            │ c)            │ –             │  
   │ Fig 6    │ Seq 4: Matching started (start with X1)     │ a) │ b)            │ c)            │ –             │  
   │ Fig 7    │ Seq 5: EIM before plug‑in                   │ –  │ b)            │ c)            │ d)            │  
   ├─────────┼────────────────────────────────────────┴────┴───────────────┴───────────────┴───────────────┤  
   │ Fig 8    │ Seq 6: DC EVSE with PnC and EIM            │ a) │ –             │ c)            │ –             │  
   └─────────┴───────────────────────────────────────────────────────────────────────────────────────┘  

 In each figure:  
  a) PnC = Plug and Charge (ISO 15118 certificate exchange)  
  b) EIM w/ BC = External Identification Means, then Basic Charging per IEC 61851‑1  
  c) EIM w/o BC = External Identification Means, then High‑Level Communication (ISO 15118)  
  d) [IEC‑1] = Basic charging only (for EVs not supporting ISO 15118)

Key examples:  
 • Figure 3 (Seq 1):  
   – EIM completes **after** plug‑in, matching has **not** started, EVSE uses 5 % duty‑cycle pilot.  
   – Branch b) leads to BC; branch c) leads to HLC‑C.  
 • Figure 7 (Seq 5):  
   – EIM completes **before** plug‑in; EVSE applies X2 (nominal) duty cycle once plugged in.  

3. Control‑Pilot Requirements After EIM  
ISO 15118‑3 adds specific timing for what the EVSE must do after a successful EIM if no ISO 15118 matching is in progress:  

 [V2G3‑M06‑08]  
 “After positive EIM, if no matching process is running, the EVSE shall  
  • signal control‑pilot state E or F (0 % duty cycle) for a duration T_step_EF,  
  • then signal control‑pilot state X1 or X2 (nominal).”  

This ensures backward compatibility with legacy (IEC 61851‑1)–only EVs and provides a clear transition into either Basic Charging or the ISO 15118 high‑level communication handshake.

4. Summary of EIM Options  
 • EIM w/ BC (branch b)  
   – EVSE performs external user identification  
   – EV charges in basic mode (IEC 61851‑1 PWM control)  
 • EIM w/o BC (branch c)  
   – EVSE performs external identification  
   – EV and EVSE proceed with an ISO 15118 V2G setup (HLC‑C) to negotiate the charging profile  
 • Timing Variants (Seq 1–Seq 6)  
   – EIM before vs. after plug‑in  
   – Matching process started vs. not started at the moment of EIM  
   – Initial pilot state: 5 % duty cycle (X2 at 5 %) or X1 (100 %)  

By selecting one of these EIM‐based branches, an EVSE can support user‐initiated authorization without requiring the vehicle’s onboard certificate system, while still allowing basic or advanced (ISO 15118) charging control.

================================================================================

Question: What is CM_SLAC_PARM.REQ?

Answer: Overview
CM_SLAC_PARM.REQ is the “SLAC Parameter Request” management message used in ISO 15118‑3 Annex A to initiate the parameter‐exchange phase of the SLAC (Signal‑Level Attenuation Characterization) matching process between an Electric Vehicle (EV) and an Electric Vehicle Supply Equipment (EVSE).  It is broadcast by the EV’s low‑layer communication module to all EVSEs connected on the control‑pilot power‑line communication (PLC) link, carrying the necessary parameters to configure the subsequent signal‑strength measurement sequence.

1. Functional Description
  • Context (Clause A.9.1.1 “Signal strength measurement – parameter exchange”):  
    – Before any M‑Sound or attenuation‑characterization messages are exchanged, the EV sends CM_SLAC_PARM.REQ as a broadcast to announce:  
      • The application type (“PEV–EVSE matching”)  
      • The security type (“no security”)  
      • A RunID that uniquely identifies this matching run  
    – Any EVSE in the “Unmatched” state that receives this broadcast shall respond with CM_SLAC_PARM.CNF, thus acknowledging receipt of the matching parameters.  
  • Triggering events:  
    – Immediately after the EV detects plug‑in (control‑pilot state B) or a wake‑up trigger (e.g., BCB‑Toggle), after the timer TP_EV_SLAC_init expires (max 10 s), the EV’s PLC node sends the first CM_SLAC_PARM.REQ.  
    – If no CM_SLAC_PARM.CNF is received within TT_match_response/TP_match_response (typ. 100 ms), the EV retries up to C_EV_match_retry times, subject to TT_matching_repetition and TT_matching_rate constraints (see Clause A.9.8).  

2. MME Content (Table A.2 — Involved MMEs for parameters exchange)
  CM_SLAC_PARM.REQ is sent as an Ethernet broadcast containing these fixed and variable fields:
    • APPLICATION_TYPE (octet 0, size 1): 0x00 — “PEV‑EVSE matching”  
    • SECURITY_TYPE (octet 1, size 1): 0x00 — “No Security”  
    • RunID (octets 2–9, size 8): Variable — randomly chosen by the EV for each run; remains constant for all messages in that run  

  Upon reception, an unmatched EVSE uses the same RunID in its CM_SLAC_PARM.CNF (now sent as a unicast to the EV) along with its own parameters (e.g., M‑Sound target, number of sounds, timeout, response type, forwarding station address).

3. Example of Use in Error Handling (Figure A.9)
  Clause A.9.8.1 illustrates a boot‑up scenario:
    1. EV PLC node (EVCC) immediately broadcasts CM_SLAC_PARM.REQ after plug‑in.  
    2. EVSE PLC node is still booting (asleep) and does not reply.  
    3. EV waits TT_match_response; on timeout, it retransmits CM_SLAC_PARM.REQ (up to C_EV_match_retry times, subject to TT_matching_rate and TT_matching_repetition).  
    4. When the EVSE’s low‑layer module finishes booting, it sends CM_SLAC_PARM.CNF, containing the matching parameters and using the same RunID.  
    5. Receipt of CM_SLAC_PARM.CNF terminates the repeated‑request cycle and allows the SLAC process to proceed (e.g., M‑Sound exchange, amplitude mapping).  

4. References to Timing Parameters
  • TP_EV_SLAC_init (max 10 s): Delay from plug‑in or wake‑up until first parameter request.  
  • TP_match_response / TT_match_response (typ. 100 ms & max 200 ms): Wait time for a response before retry.  
  • TT_matching_repetition (max 10 s): Overall window for repeating the matching process on error.  
  • TT_matching_rate (max 400 ms): Minimum pause between successive full matching attempts.  
  • Upon a successful CM_SLAC_PARM.CNF exchange, all timers and retry counters are reset (per [V2G3‑M08‑02]).

================================================================================

Question: What is CM_SLAC_PARM.CNF?

Answer: Overview  
CM_SLAC_PARM.CNF is the unicast confirmation message used in the SLAC (Signal‑Level Attenuation Characterization) parameter exchange phase of ISO 15118‑3. After an EV broadcasts matching parameters via CM_SLAC_PARM.REQ, any “unmatched” EVSE low‑layer communication module that is ready to participate responds with CM_SLAC_PARM.CNF. This message tells the EV which parameters to use for the subsequent signal strength measurement (M‑Sounds exchange) and finalizes the first step of the EV–EVSE matching process.

1. Functional Role in Signal‑Strength Measurement  
  • Context (see A.9.1):  
    – Before measuring signal strength, the EV sends CM_SLAC_PARM.REQ as an Ethernet broadcast containing the matching parameters it proposes.  
    – Any EVSE in the “Unmatched” state that is connected to an EV and whose low‑layer module is ready must reply with CM_SLAC_PARM.CNF.  
  • EV‑side behavior (see A.9.1.3.2):  
    – Upon sending CM_SLAC_PARM.REQ, the EV starts the TT_match_response timer.  
    – If no valid CM_SLAC_PARM.CNF arrives before this timer expires, the EV retransmits CM_SLAC_PARM.REQ and restarts TT_match_response.  
    – This retry continues up to C_EV_match_retry times; if still no response, the matching process is considered FAILED.  
    – If a received CM_SLAC_PARM.CNF has content that deviates from its definition (Table A.2), the EV ignores it and continues retrying.  
  • Error‑handling example (see A.9.8.1 and Figure A.9):  
    – The EV sends CM_SLAC_PARM.REQ immediately after cable plug‑in (TP_EV_SLAC_init).  
    – If the EVSE’s PLC module is still booting (asleep), it cannot respond. Once it wakes and finishes initialization (within TT_EVSE_SLAC_init), it sends CM_SLAC_PARM.CNF.

2. Message Structure and MMEs (see Table A.2)  
CM_SLAC_PARM.CNF is a unicast MME containing the following fields (octet positions are relative to the start of the MME):  

  • M‑SOUND_TARGET (octets 0–5, 6 octets)  
    – Value: 0xFFFFFFFFFFFF  
    – Indicates that subsequent M‑Sounds are to be sent as Ethernet broadcasts.  

  • NUM_SOUNDS (octet 6, 1 octet)  
    – Value: C_EV_match_MNBC  
    – Number of M‑Sounds the EVSE expects the EV to transmit during SLAC.  

  • Time_Out (octet 7, 1 octet)  
    – Value: 0x06  
    – Specifies TT_EVSE_match_MNBC: the duration the EVSE listens for incoming M‑Sounds after a CM_START_ATTEN_CHAR.IND.  

  • RESP_TYPE (octet 8, 1 octet)  
    – Value: 0x01  
    – Fixed to indicate “Other GP station.”  

  • FORWARDING_STA (octets 9–14, 6 octets)  
    – Value: EV Host MAC address  
    – The destination address for SLAC results (always the EV Host).  

  • APPLICATION_TYPE (octet 15, 1 octet)  
    – Value: 0x00  
    – Fixed, indicating “PEV–EVSE matching.”  

  • SECURITY_TYPE (octet 16, 1 octet)  
    – Value: 0x00  
    – Fixed, indicating “No Security.”  

  • RunID (octets 17–24, 8 octets)  
    – Variable; must match the RunID sent by the EV in its CM_SLAC_PARM.REQ.  
    – Identifies the matching run and remains constant for all messages in that run.  

3. Timing and Interaction Summary  
  • TP_EV_SLAC_init  
    – The EV must send its first CM_SLAC_PARM.REQ within this timer (typ. 10 s) after plug‑in or wake‑up.  
  • TT_match_response  
    – The maximum time (typ. 100 ms) the EV waits for any CM_SLAC_PARM.CNF before retrying.  
  • C_EV_match_retry  
    – Maximum number of CM_SLAC_PARM.REQ retransmissions (max 2) before declaring failure.  
  • TT_EVSE_SLAC_init  
    – The EVSE’s readiness timer (20 … 50 s) between detecting the EV presence and first CM_SLAC_PARM.REQ reception.  

Once a valid CM_SLAC_PARM.CNF is received, the EV and EVSE proceed to the next SLAC stages (e.g., attenuation characterization), and all matching‑process timers and retry counters are reset.

================================================================================

Question: What is CM_START_ATTEN_CHAR.IND?

Answer: Overview  
CM_START_ATTEN_CHAR.IND is the HomePlug Green PHY (HPGP) “Matching and Attenuation Characterization” broadcast message used by the Electric Vehicle’s low‑layer communication module (EV PLC node) to trigger signal‐strength measurements (SLAC) on candidate Electric Vehicle Supply Equipment (EVSE) nodes. It marks the beginning of the attenuation‐measurement phase of the EV–EVSE matching process defined in ISO 15118‑3 Annex A (SLAC).

1. Definition and Role  
  • After the SLAC parameter exchange (CM_SLAC_PARM.REQ/CNF), the EV initiates the signal‐strength measurement process by sending CM_START_ATTEN_CHAR.IND messages.  
  • The EV sends this message C_EV_start_atten_char_inds times (typical value: 3) to announce the upcoming M‐SOUND burst.  
  • Each CM_START_ATTEN_CHAR.IND is broadcast over the PLC medium; all EVSE PLC nodes that receive it prepare to measure the S‑sounds (M‐SOUNDs) that follow and compute attenuation profiles.  
  • Upon completion of the M‐SOUND transmission, EVSE nodes unicast back CM_ATTEN_CHAR.IND messages containing their measured attenuation profiles.

2. Sequence of Use in the SLAC Matching Process  
  A.9.2.1 (Signal strength measurement > Matching EV–EVSE process)  
  1. EV and EVSE complete SLAC parameter exchange (CM_SLAC_PARM.REQ/CNF).  
  2. EV sends CM_START_ATTEN_CHAR.IND repeatedly (C_EV_start_atten_char_inds times).  
  3. EV transmits C_EV_match_MNBC M‐SOUND indications (CM_MNBC_SOUND.IND) per run.  
  4. Each EVSE measures received S‑sounds, computes its attenuation profile, and replies with CM_ATTEN_CHAR.IND (unicast).  
  5. EV confirms each CM_ATTEN_CHAR.IND by sending CM_ATTEN_CHAR.RSP.  
  6. EV calculates average attenuations and decides EVSE_FOUND, EVSE_POTENTIALLY_FOUND, or EVSE_NOT_FOUND.

3. MME Parameters Definition (Table A.4 excerpt for CM_START_ATTEN_CHAR.IND — broadcast)  
  Octet No. Field               Size Value             Definition  
  0  APPLICATION_TYPE  1  0x00   “PEV‑EVSE Matching”  
  1  SECURITY_TYPE    1  0x00   “No Security”  
  2  NUM_SOUNDS      1  C_EV_match_MNBC Number of M‐Sounds to follow  
  3  Time_Out        1  TT_EVSE_match_MNBC Maximum window for EVSE to receive M‑Sounds  
  4  RESP_TYPE       1  0x01   “other Green PHY station”  
  5–10 FORWARDING_STA 6  EV Host MAC  Destination for SLAC results (EV Host)  
  11–18 RunID        8  variable   Same identifier as in CM_SLAC_PARM.REQ

4. Related Configuration Parameters (Table A.1)  
  • C_EV_start_atten_char_inds: Number of CM_START_ATTEN_CHAR.INDs sent by the EV (typical: 3)  
  • C_EV_match_MNBC: Number of M‐SOUNDS sent for SLAC (typical: 10)  
  • TP_EV_batch_msg_interval: Interval between consecutive CM_START_ATTEN_CHAR.IND or CM_MNBC_SOUND.IND (20…50 ms)  
  • TT_EVSE_match_MNBC: Timeout on EVSE side that triggers average‐attenuation calculation (typical: 600 ms)  

5. Compliance Notes  
  • The low‑layer communication modules on EV and EVSE shall implement SLAC as defined by HomePlug Green PHY ([V2G3‑A09‑17]).  
  • The sequence of CM_START_ATTEN_CHAR.IND, CM_MNBC_SOUND.IND, CM_ATTEN_CHAR.IND and CM_ATTEN_CHAR.RSP messages shall follow the SLAC message‐flow diagrams (Figure A.1) and timing constraints in Table A.1.

================================================================================

Question: What is CM_MNBC_SOUND.IND?

Answer: Overview  
CM_MNBC_SOUND.IND is one of the low‑layer communication primitives defined in ISO 15118‑3 (and the HomePlug Green PHY SLAC profile) that the electric vehicle (EV) sends to the charging station (EVSE) during the SLAC‑based signal‐strength measurement (A.9.2). Each CM_MNBC_SOUND.IND invokes the transmission of one “M‑Sound” tone by the EV. The EV sends this indication C_EV_match_MNBC times (see Table A.1) after its initial attenuation‐characterization messages. The EVSE measures the received M‑Sounds, computes an attenuation profile, and reports it back to the EV using CM_ATTEN_CHAR.IND messages.

1. SLAC Signal‐Strength Measurement Sequence (see Figure A.4)  
  1. After parameter exchange (A.9.2.1), the EV sends CM_START_ATTEN_CHAR.IND messages C_EV_start_atten_char_inds times to announce the start of attenuation characterization.  
  2. Immediately thereafter, the EV sends CM_MNBC_SOUND.IND messages in succession, totaling C_EV_match_MNBC emissions of the M‑Sound waveform.  
  3. Each EVSE that hears these M‑Sounds computes its average attenuation profile and responds with a CM_ATTEN_CHAR.IND message.  
  4. The EV confirms each attenuation report by replying with a CM_ATTEN_CHAR.RSP.  
  5. Based on the reported Average_Attenuation values and thresholds (C_EV_match_signalattn_direct and C_EV_match_signalattn_indirect), the EV sets its EV_Discovery_Status to EVSE_FOUND, EVSE_POTENTIALLY_FOUND, or EVSE_NOT_FOUND (Table A.3).

2. Related Primitives  
  • CM_START_ATTEN_CHAR.IND  
     – Triggers the EVSE to prepare for subsequent M‑Sound measurements.  
  • CM_MNBC_SOUND.IND  
     – Indicates one M‑Sound emission. Sent by the EV C_EV_match_MNBC times.  
  • CM_ATTEN_CHAR.IND  
     – Carries the EVSE’s computed attenuation profile back to the EV.  
  • CM_ATTEN_CHAR.RSP  
     – The EV’s acknowledgement of each CM_ATTEN_CHAR.IND.

3. Timing and Constant Parameters (Table A.1)  
  • C_EV_match_MNBC  
     – Number of M‑Sounds (CM_MNBC_SOUND.IND messages) the EV shall send for SLAC  
     – Typical value: 10 (nbr)  
  • C_EV_start_atten_char_inds  
     – Number of CM_START_ATTEN_CHAR.IND messages the EV shall send before M‑Sounds  
     – Typical value: 3 (nbr)  
  • TP_EV_batch_msg_interval  
     – Minimum and maximum interval between consecutive CM_START_ATTEN_CHAR.IND or CM_MNBC_SOUND.IND messages  
     – Min: 20 ms; Max: 50 ms  

4. Thresholds for Matching (Table A.1 & Table A.3)  
  • C_EV_match_signalattn_direct (typical 10 dB)  
  • C_EV_match_signalattn_indirect (typical 20 dB)  
  • EVSE_FOUND if Average_Attenuation ≤ C_EV_match_signalattn_direct  
  • EVSE_POTENTIALLY_FOUND if between direct and indirect thresholds  
  • EVSE_NOT_FOUND if ≥ C_EV_match_signalattn_indirect

5. Standards References  
  • SLAC method as defined in HomePlug Green PHY ([HPGP])  
  • ISO 15118‑3 defines the physical and data‑link primitives (including CM_MNBC_SOUND.IND) on the control‑pilot line.  

Figure A.4 (A.9.2.3.1 Sequence chart of signal strength measurement) illustrates this exchange: the EV’s CM_START_ATTEN_CHAR.IND and CM_MNBC_SOUND.IND bursts, followed by EVSE CM_ATTEN_CHAR.IND responses and EV CM_ATTEN_CHAR.RSP acknowledgements.

================================================================================

Question: What is CM_ATTEN_CHAR.IND?

Answer: Overview  
CM_ATTEN_CHAR.IND is a SLAC‑defined indication message sent by an EVSE during the EV–EVSE matching process (see A.9.2, “Signal strength measurement”). It carries the EVSE’s measured attenuation profile (ATTEN_PROFILE) for different frequency groups of the M‑SOUND test signals. The EV uses these measurements to compute an average signal attenuation and decide which EVSE it is directly connected to.

1. Context: Signal Strength Measurement in EV–EVSE Matching  
  • After the SLAC parameter exchange, the EV begins the attenuation‑characterization sequence by sending  
    – C_EV_start_atten_char_inds times CM_START_ATTEN_CHAR.IND  
    – followed by C_EV_match_MNBC M‑SOUNDs.  
  • Each EVSE measures the attenuation of the received M‑SOUNDs, aggregates the results, and returns them in a CM_ATTEN_CHAR.IND message.  
  • Upon receiving each CM_ATTEN_CHAR.IND, the EV replies individually with CM_ATTEN_CHAR.RSP.

  Figure A.4 — Sequence chart of signal strength measurement  
  (Sequence steps:  
   EV: CM_START_ATTEN_CHAR.IND → M‑SOUNDs → …  
   EVSE: process M‑SOUNDs → CM_ATTEN_CHAR.IND → EV: CM_ATTEN_CHAR.RSP → …)

2. CM_ATTEN_CHAR.IND Data and Calculations  
  2.1 ATTEN_PROFILE  
    • Contains per‑group attenuation values.  
    • Calculated as the arithmetic mean of the ATTEN_PROFILEs reported in preceding CM_ATTEN_PROFILE.IND messages, corrected by the EVSE’s receive‑path attenuation (AttnRx‑EVSE, see A.9.4.1).  

  2.2 Average_Attenuation  
    • The EV computes Average_Attenuation as the arithmetic mean of all groups in the CM_ATTEN_CHAR.IND.  
    • A weighted average may be used (sum of weights = 1) to reflect implementation specifics.  
    • This average is compared against thresholds to set EV_Discovering_Status (Table A.3).

3. Handling and Validation Requirements  
  • If NUM_SOUNDS = 0 ⇒ ATTEN_PROFILE is meaningless; the EV shall ignore the entire CM_ATTEN_CHAR.IND.  
  • If the message content deviates from the MME definition (Table A.4) ⇒ the EV shall ignore it.  
  • If the CM_ATTEN_CHAR.IND comes from an EVSE that has not previously sent CM_SLAC_PARM.CNF ⇒ the EV shall still process it.  

  On the EVSE side:  
  • After sending CM_ATTEN_CHAR.IND, the EVSE starts timer TT_match_response.  
  • If no CM_ATTEN_CHAR.RSP arrives before TT_match_response expires, the EVSE retransmits CM_ATTEN_CHAR.IND and restarts TT_match_response.  
  • After C_EV_match_retry unsuccessful attempts, the matching process is considered FAILED.

4. EV_Discovering_Status Definition (Table A.3)  
  Based on the Average_Attenuation from CM_ATTEN_CHAR.IND, the EV sets EV_Discovering_Status as follows:

  Table A.3 — EV_Discovering_Status definition  
  | Status                    | Average_Attenuation From      | To                            | Description                                                                      |
  |---------------------------|-------------------------------|-------------------------------|----------------------------------------------------------------------------------|
  | EVSE_FOUND               | –                             | C_EV_match_signalattn_direct | The EVSE is identified without any doubt.                                        |
  | EVSE_POTENTIALLY_FOUND   | C_EV_match_signalattn_direct  | C_EV_match_signalattn_indirect | One or several EVSEs are identified; further matching (A.7.3) will decide which. |
  | EVSE_NOT_FOUND           | C_EV_match_signalattn_indirect | –                             | No directly connected EVSE is found.                                             |

5. Timing and Retry Parameters (Excerpt from Table A.1)  
  Parameter                     | Typical / Max | Unit | Description  
  -----------------------------|--------------|------|--------------------------------------------  
  C_EV_match_retry             | – / 2        | nbr  | Number of retransmission attempts of CM_ATTEN_CHAR.IND.  
  C_EV_match_signalattn_direct | 10           | dB   | Lower threshold for “direct” signal strength.  
  C_EV_match_signalattn_indirect | 20         | dB   | Upper threshold for “indirect” signal strength.  
  TT_match_response            | – / 100      | ms   | Max time for EVSE to wait for CM_ATTEN_CHAR.RSP before retry.  

6. Next Steps After CM_ATTEN_CHAR.IND  
  Depending on EV_Discovering_Status, the EV’s low‑layer communication module proceeds as follows (see A.9.2.1):  
  • EVSE_FOUND ⇒ continue flow per A.7.4 (SLAC_MATCH).  
  • EVSE_POTENTIALLY_FOUND ⇒ continue flow per A.7.3 (VALIDATE).  
  • EVSE_NOT_FOUND ⇒ matching process = FAILED.

================================================================================

Question: What is CM_ATTEN_CHAR.RSP?

Answer: Overview  
CM_ATTEN_CHAR.RSP is a low‑layer communication message defined in Annex A of ISO 15118‑3. It is used by the Electric Vehicle (EV) to acknowledge each attenuation‑measurement result (CM_ATTEN_CHAR.IND) sent by potential charging stations (EVSEs) during the SLAC‑based signal‑strength (attenuation) measurement phase of the EV–EVSE matching process.

1. Functional Role in the SLAC‑Based Signal Strength Measurement  
   – After completing the SLAC parameter exchange, the EV initiates the attenuation measurement by sending a series of CM_START_ATTEN_CHAR.IND messages and M‑SOUNDS to one or more EVSEs (see A.9.2.1 Functional description).  
   – Each EVSE measures the signal attenuation over predefined frequency groups and returns its results in a CM_ATTEN_CHAR.IND message.  
   – Upon receiving a CM_ATTEN_CHAR.IND, the EV must confirm correct reception by replying with an individual CM_ATTEN_CHAR.RSP for each CM_ATTEN_CHAR.IND received. This confirmation lets the EVSE know that its measurement was successfully delivered.

2. Message Sequence (see Figure A.4 – Sequence chart of signal strength measurement)  
   1. SLAC parameter exchange: EV ↔ EVSE (CM_SLAC_PARM.REQ/CNF)  
   2. EV → EVSE: C_EV_start_atten_char_inds × CM_START_ATTEN_CHAR.IND  
   3. EV → EVSE: C_EV_match_MNBC × M‑SOUND INDICATIONS  
   4. EVSE → EV: CM_ATTEN_CHAR.IND (measurement of attenuation profile)  
   5. EV → EVSE: CM_ATTEN_CHAR.RSP (acknowledgment of each IND)  
   6. After all IND/RSP exchanges or upon timer expiry (TT_EV_atten_results), the EV computes average attenuation and sets its EV_Discovering_Status accordingly (EVSE_FOUND, EVSE_POTENTIALLY_FOUND, or EVSE_NOT_FOUND).

3. Content Validation and Error Handling  
   – The content and format of CM_ATTEN_CHAR.RSP must conform exactly to the Message Mapping Entity (MME) definition given in Table A.4.  
   – If an EVSE receives a CM_ATTEN_CHAR.RSP whose content deviates from that definition, it shall ignore the message. Invalid RSPs do not interrupt the measurement sequence, but they are discarded.

4. Related Parameters and Timers  
   – TT_EV_atten_results: maximum time the EV waits for all CM_ATTEN_CHAR.IND messages before concluding measurements.  
   – TP_EV_match_session: performance time for the EV to start next matching steps after sending CM_ATTEN_CHAR.RSP.  
   – Thresholds C_EV_match_signalattn_direct and C_EV_match_signalattn_indirect, and average‑attenuation calculations, drive the final matching decision (see Table A.3).

By explicitly acknowledging each CM_ATTEN_CHAR.IND with CM_ATTEN_CHAR.RSP, the EV ensures reliable delivery of attenuation profiles, enabling accurate proximity‑based EV–EVSE matching in the HomePlug Green PHY (SLAC) process.

================================================================================

Question: What is CM_ATTEN_PROFILE.IND?

Answer: Overview  
CM_ATTEN_PROFILE.IND is a low‑layer communication message used in the SLAC‑based signal strength measurement procedure defined in ISO 15118‑3. It is sent by an EVSE to the EV after one or more M‑SOUNDS and carries an array of attenuation‐of‐signal measurements (the ATTEN_PROFILE) that the EVSE has derived on its receive path. The EV uses these reported profiles to determine which EVSE(s) it is directly connected to and to drive the subsequent matching process.

1. Context and Purpose  
  • The goal of the signal strength measurement (A.9.2 “Matching EV – EVSE process”) is to enable the EV to discover which EVSE nodes are physically closest (directly wired) by comparing measured attenuations.  
  • The procedure follows the SLAC method defined in the HomePlug Green PHY specification [HPGP].  

2. Message Flow (see Figure A.4)  
  1. After completing the parameter‐exchange phase, the EV starts the measurement by sending CM_START_ATTEN_CHAR.IND messages (C_EV_start_atten_char_inds times).  
  2. The EV then transmits a defined number of M‑SOUNDS (C_EV_match_MNBC times).  
  3. Each potential EVSE measures the incoming signal strength over predefined frequency groups and computes a per‑group attenuation profile.  
  4. The EVSE reports that profile back to the EV in a CM_ATTEN_PROFILE.IND message (often called CM_ATTEN_CHAR.IND in the remainder of the text).  
  5. The EV confirms receipt of each CM_ATTEN_PROFILE.IND by replying with a CM_ATTEN_CHAR.RSP.  
  6. Upon gathering all reports or after timeout (TT_EV_atten_results), the EV computes an overall average attenuation and sets its EV_Discovering_Status (EVSE_FOUND, EVSE_POTENTIALLY_FOUND, or EVSE_NOT_FOUND) according to Table A.3 thresholds.

3. ATTEN_PROFILE Calculation (A.9.2.1 and A.9.4.1)  
  • The ATTEN_PROFILE field in each CM_ATTEN_PROFILE.IND consists of a list of attenuation values (one per carrier‐group).  
  • Each value shall be computed as the arithmetic mean of the corresponding attenuation measurements of previous M‑SOUNDS, corrected by the EVSE’s receive‐path insertion loss (AttnRxEVSE).  
  • In other words:  
      ATTEN_PROFILE[n] = mean{ raw_attenuation_group_n from each M‑SOUND } + AttnRxEVSE  
  • A weighted average may be used if necessary, provided the sum of the weights equals one.  

4. Receive‑Path Correction (A.11.4.1)  
  • The EVSE must correct for its internal receive‑path loss (AttnRxEVSE) before reporting, because the raw SLAC measurement references a –50 dBm/Hz baseline.  
  • Example (from Figure A.11): if the raw measurement is –31 dB and AttnRxEVSE is 3 dB, the reported attenuation is –28 dB per carrier group.  
  • AttnRxEVSE is the insertion loss between the HomePlug Green PHY modem and the EVSE’s charge coupler (typical example: 3 dB).

5. Related Timings and Constants (Table A.1)  
  • C_EV_start_atten_char_inds: Number of CM_START_ATTEN_CHAR.IND messages sent by the EV (typical = 3)  
  • C_EV_match_MNBC: Number of M‑SOUNDS sent for SLAC measurement (typical = 10)  
  • TT_EV_atten_results: Time the EV waits for CM_ATTEN_PROFILE.IND messages (max = 1200 ms)  
  • C_EV_match_signalattn_direct: Lower threshold for “direct” connection (typical = 10 dB)  
  • C_EV_match_signalattn_indirect: Upper threshold for “indirect” connection (typical = 20 dB)

6. Use in EV–EVSE Matching  
  • Upon reception of one or more CM_ATTEN_PROFILE.IND messages, the EV computes an overall Average_Attenuation (arithmetic or weighted mean over all groups).  
  • It then compares this value against the thresholds C_EV_match_signalattn_direct and C_EV_match_signalattn_indirect to set its EV_Discovery_Status (see Table A.3).  
  • Depending on the status (EVSE_FOUND, EVSE_POTENTIALLY_FOUND, or EVSE_NOT_FOUND), the EV proceeds with the next steps of session setup as described in A.7.3 or A.7.4.

Figure / Table References  
  • Figure A.4 — Sequence chart of signal strength measurement (A.9.2.3.1)  
  • Table A.1 — Timing and constant values for SLAC matching (parameters listed above)  
  • Table A.3 — Definition of EV_Discovering_Status based on Average_Attenuation

================================================================================

Question: What is CM_VALIDATE.REQ?

Answer: Overview  
CM_VALIDATE.REQ is a low‑layer communication message (MME) defined in ISO 15118‑3 used by an Electric Vehicle (EV) to request a validation of the matching decision made after signal‑strength measurement. It forms the request part of a two‑step validation process (CM_VALIDATE.REQ ↔ CM_VALIDATE.CNF) to confirm that the EV is physically connected to the intended EVSE. The first and second request‑response exchanges differ in their message contents and fields.

1. Functional Description  
• The validation process occurs after the EV has performed a SLAC‑based signal strength measurement and obtained an EV_Discovering_Status of EVSE_FOUND or EVSE_POTENTIALLY_FOUND.  
• It is divided into two parts:  
  – Step 1: EV sends CM_VALIDATE.REQ (Timer = 0, Result = “ready”) to check whether the EVSE is ready to perform physical validation. EVSE replies with CM_VALIDATE.CNF carrying a ToggleNum = 0 and a Result code (“ready”, “not ready”, “not required”, “failure”).  
  – Step 2: If EVSE indicates “ready”, the EV sends a second CM_VALIDATE.REQ (broadcast) with a nonzero Timer (TP_EV_vald_toggle) and Result = “ready”. The EV then performs C_EV_vald_nb_toggles B‑C‑B toggles on the control pilot line. After Timer expires, EVSE counts toggles and responds with CM_VALIDATE.CNF containing the counted ToggleNum and a Result code. “Success” indicates valid data; “failure” indicates an error or mismatch.  
• The process is asynchronous: an unmatched EVSE still responds to step 1 CM_VALIDATE.REQ.  
• If any CM_VALIDATE.REQ contains invalid content (i.e. deviates from the MME definitions), it shall be ignored.  
• If EVSE responds in step 1 with a Result other than “ready”, the EV considers the matching process failed or may retry/skip per system rules.  

2. MME Parameter Definitions  
Table A.5 — First Request‑Response (CM_VALIDATE.REQ Unicast)  
  • SignalType (Octet 0, 1 octet): 0x00 = “PEV S2 toggles on control pilot line”  
  • Timer     (Octet 1, 1 octet): 0x00 (fixed for step 1)  
  • Result    (Octet 2, 1 octet): 0x01 = “ready”  

Table A.6 — Second Request‑Response (CM_VALIDATE.REQ Broadcast)  
  • SignalType (Octet 0, 1 octet): 0x00 = “PEV S2 toggles on control pilot line”  
  • Timer     (Octet 1, 1 octet): variable (time during which EVSE listens for B‑C‑B toggles; coded per defined values)  
  • Result    (Octet 2, 1 octet): 0x01 = “ready”  

3. EV Side Behavior  
• Upon deciding to validate, the EV sends step 1 CM_VALIDATE.REQ with Timer=0 and Result=“ready.”  
• It starts the TT_match_response timer. If no valid CM_VALIDATE.CNF arrives before expiry, it retries up to C_EV_match_retry times.  
• If the EV receives step 1 CM_VALIDATE.CNF with Result = “ready,” it sends step 2 CM_VALIDATE.REQ within TP_match_sequence, using a Timer covering the entire BCB‑Toggle sequence, and starts TP_EV_vald_toggle and then TT_match_response for the confirm.  
• During TP_EV_vald_toggle the EV performs randomly chosen C_EV_vald_nb_toggles B‑C‑B toggles.  
• After Timer expiry, it waits for CM_VALIDATE.CNF. If Result = “Success” and ToggleNum matches the number of toggles performed, the matching decision is confirmed. Otherwise (Result = “failure”, “not ready”, “not required”, or mismatch), it stops validation with this EVSE and may continue with the next candidate.  
• Any invalid CM_VALIDATE.REQ received by the EV is ignored.  

4. EVSE Side Behavior  
• Upon receiving step 1 CM_VALIDATE.REQ (Timer=0), the EVSE replies within TP_match_response with CM_VALIDATE.CNF (ToggleNum=0) and sets Result to one of:  
  – “ready” (able to perform validation)  
  – “not ready” (busy; EV may retry)  
  – “not required” (validation not required; EV may skip or force step 2)  
  – “failure” (not supported; EV decides whether to skip or try another EVSE)  
• If it receives another step 1 CM_VALIDATE.REQ with Timer=0 after already replying, it resends the CM_VALIDATE.CNF.  
• Upon receiving step 2 CM_VALIDATE.REQ, it starts TT_EVSE_vald_toggle and counts B‑C‑B toggles on the control pilot. After Timer expiry, it sends CM_VALIDATE.CNF (ToggleNum = counted toggles) with Result = “Success” if data valid, or “failure” if an error occurred.  
• Any CM_VALIDATE.REQ containing invalid content or a Result field other than “ready” (in step 1) shall be ignored or cause the matching process to fail.  

5. Sequence Chart (Figure A.5)  
Figure A.5 in Annex A.9.3.3.1 illustrates the two‑step CM_VALIDATE exchange between EV and EVSE:  
  – Step 1: CM_VALIDATE.REQ (unicast, Timer=0, Result=ready) → CM_VALIDATE.CNF (ToggleNum=0, Result=…)  
  – Step 2: CM_VALIDATE.REQ (broadcast, Timer=TP_EV_vald_toggle, Result=ready) → CM_VALIDATE.CNF (ToggleNum, Result=Success/failure)  
This chart shows the timers (TT_match_response, TP_EV_vald_toggle, TT_EVSE_vald_toggle) and the B‑C‑B toggle sequence used to validate the physical connection independent of the SLAC measurement.

================================================================================

Question: What is CM_VALIDATE.CNF?

Answer: Overview  
CM_VALIDATE.CNF is the confirmation message sent by an Electric Vehicle Supply Equipment (EVSE) to an Electric Vehicle (EV) during the two‑step “validation of matching decision” defined in ISO 15118‑3 (Annex A.9.3). It follows a CM_VALIDATE.REQ request from the EV and conveys the EVSE’s readiness and/or the result of a physical‑layer validation procedure (using control‑pilot “BCB‑toggle” sequences) meant to confirm which EVSE the EV is actually plugged into.

1. Context: Validation of Matching Decision  
  • Occurs after the initial SLAC‑based signal‑strength measurement (Clause A.9.2) yields an ambiguous or potentially found EVSE (“EVSE_POTENTIALLY_FOUND”) or—at the EV’s insistence—even when a single EVSE is clearly found.  
  • Divided into two exchanges (step 1 and step 2), each consisting of a CM_VALIDATE.REQ (from EV) and a CM_VALIDATE.CNF (from EVSE).  
  • See Sequence Chart: Figure A.5 in Clause A.9.3.3.1.  

2. Message Definition and Fields  
  CM_VALIDATE.CNF carries three fields in both the first and second exchanges:  
    1. SignalType (1 octet)  
      – Fixed to 0x00, indicating “PEV S2 toggles on control pilot line.”  
    2. ToggleNum (1 octet)  
      – In step 1 CNF: fixed to 0x00 (no toggles yet counted).  
      – In step 2 CNF: variable, equal to the number of B‑to‑C‑to‑B (BCB) edges counted by the EVSE during the toggle window.  
    3. Result (1 octet)  
      – Indicates the EVSE’s state or validation outcome. Valid codes are:  
        • 0x00 = Not Ready  
        • 0x01 = Ready  
        • 0x02 = Success  
        • 0x03 = Failure  
        • 0x04 = Not Required  

3. First Request‑Response Exchange (Step 1)  
  • EV sends CM_VALIDATE.REQ (Timer = 0x00, Result = 0x01 “ready”) to ask whether the EVSE is prepared to validate.  
  • EVSE responds with CM_VALIDATE.CNF containing:  
    – ToggleNum = 0x00  
    – Result = one of:  
       • “Ready” (0x01) → EV proceeds to step 2.  
       • “Not Ready” (0x00) → EV may retry the step 1 request after a back‑off.  
       • “Not Required” (0x04) → EV may skip validation or force step 2.  
       • “Failure” (0x03) → EVSE does not support validation; EV decides to skip, try another EVSE, or abort.  
  • Retransmission/timing behavior: per A.9.3.3.3, EVSE restarts TT_match_sequence after sending step 1 CNF, resends it up to C_EV_match_retry times if no valid step 2 REQ or SLAC_MATCH.REQ is received.  

4. Second Request‑Response Exchange (Step 2)  
  • EV (having received “Ready”) sends CM_VALIDATE.REQ (Timer = selected BCB‑toggle window, Result = 0x01).  
  • EVSE, upon receipt:  
    – Starts timer TT_EVSE_vald_toggle = Timer field.  
    – Counts BCB toggles on the control pilot line.  
  • When timer expires, EVSE sends CM_VALIDATE.CNF containing:  
    – ToggleNum = number of edges counted  
    – Result = “Success” (0x02) if count is valid, or “Failure” (0x03) if counting could not be performed or data invalid.  
  • After sending, EVSE restarts TT_match_sequence, awaiting either a CM_SLAC_MATCH.REQ or timing out to fail the matching process.  

5. EVSE Behavior and Response Conditions  
  • If occupied by another validation, EVSE returns “Not Ready.”  
  • If it cannot or is not implemented to validate, returns “Failure.”  
  • May return “Not Required” when no validation is needed.  
  • Must comply with timing and retry rules in A.9.3.3.3 (TT_match_sequence, TP_match_response, C_EV_match_retry).  

6. EV Behavior upon Receiving CM_VALIDATE.CNF  
  • Invalid or out‑of‑spec CNF messages are ignored. Fields must conform to Table A.5/A.6 definitions.  
  • For step 1 CNF:  
    – “Ready” → proceed to send step 2 REQ.  
    – “Not Ready” → either retry step 1 later or move on to another EVSE.  
    – “Not Required” → EV may skip validation or insist on step 2.  
    – “Failure” → EV decides to skip validation entirely, try another EVSE, or abort session.  
  • For step 2 CNF:  
    – “Success” → EV compares ToggleNum with its own count. If equal, matching is confirmed (“EVSE_FOUND”), and EV sends CM_SLAC_MATCH.REQ to finalize. Otherwise EV moves to next candidate.  
    – “Failure,” “Not Ready,” or “Not Required” → EV stops with current EVSE and proceeds to the next potential EVSE.  
    – Lack of valid CNF after retries → EV moves on to next EVSE.  

7. Key Timers and Retries (see Tables A.1, A.3 and A.7)  
  • TT_match_response: EV’s timeout waiting for any CM_VALIDATE.CNF.  
  • TT_match_sequence: EVSE’s timeout for receiving subsequent requests.  
  • TP_match_response: performance timer for EVSE to reply.  
  • C_EV_match_retry: number of REQ retransmissions by EV or CNF retransmissions by EVSE.  

8. Relation to Overall Matching Process (Figure 10)  
  • CM_VALIDATE.CNF is part of the optional “Validation of matching decision” step in the EV’s matching flowchart (Clause A.9.3.1).  
  • A “Success” result leads to final SLAC_MATCH.REQ and logical network establishment (D-LINK_READY.IND).  
  • A “Failure” or lack of readiness triggers retries or continuation with other EVSE candidates until a link is established or the process fails.

================================================================================

Question: What is CM_SLAC_MATCH.REQ?

Answer: Overview  
CM_SLAC_MATCH.REQ is a unicast SLAC (Signal‑Level Attenuation Characterization) matching message sent by the EV’s low‑layer communication module once it has determined which EVSE is physically connected. Its purpose is to finalize the matching decision and to request the parameters needed to join the EVSE’s private logical network (e.g. NMK/NID exchange) so that the EV and EVSE can proceed with higher‑layer communication.

1. Context in the HomePlug Green PHY Matching Process  
  1.1. SLAC Measurement and Decision  
    – After the EV has exchanged parameters (CM_SLAC_PARM.REQ/CNF) and performed the attenuation characterization (CM_START_ATTEN_CHAR.IND → CM_MNBC_SOUND.IND → CM_ATTEN_CHAR.IND → CM_ATTEN_CHAR.RSP), it evaluates the average attenuation.  
    – Depending on the attenuation result, the EV sets EV_Discovering_Status to one of:  
       • EVSE_FOUND – identified without doubt  
       • EVSE_POTENTIALLY_FOUND – one or several candidates; may require validation  
       • EVSE_NOT_FOUND – no direct EVSE found (matching fails)  
  1.2. Optional Validation  
    – If EVSE_POTENTIALLY_FOUND, the EV may perform a BCB‑toggle validation (CM_VALIDATE.REQ/CNF exchanges) before sending CM_SLAC_MATCH.REQ.  
  1.3. Sending CM_SLAC_MATCH.REQ  
    – Once the EV is confident which EVSE to join (either directly or after validation), it issues CM_SLAC_MATCH.REQ to the selected EVSE PLC node.  

2. Message Format and Parameters  
The message fields of CM_SLAC_MATCH.REQ are defined in Table A.7 (Annex A.9.4.2) as follows:

  MME: CM_SLAC_MATCH.REQ (Unicast)  
  Fields (all octet offsets zero‑based):  
  – APPLICATION_TYPE (0, 1 octet)  
      Fixed 0x00 (“PEV‑EVSE matching”)  
  – SECURITY_TYPE (1, 1 octet)  
      Fixed 0x00 (“No Security”)  
  – MVFLength (2–3, 2 octets)  
      Fixed 0x003E (length of matching MME fields)  
  – PEV ID (4–20, 17 octets)  
      Identifier of the EV (as in CM_SLAC_PARM.REQ)  
  – PEV MAC (21–26, 6 octets)  
      MAC address of the EV Host  
  – EVSE ID (26–43, 17 octets)  
      Identifier of the selected EVSE (as in CM_SLAC_PARM.CNF)  
  – EVSE MAC (44–49, 6 octets)  
      MAC address of the EVSE Host  
  – RunID (50–57, 8 octets)  
      Copy of the RunID sent earlier by the EV in CM_SLAC_PARM.REQ  
  – RSVD (58–65, 8 octets)  
      Reserved (0x00)  

3. EVSE Handling of CM_SLAC_MATCH.REQ  
  – Upon receiving a valid CM_SLAC_MATCH.REQ, the EVSE PLC node shall respond with CM_SLAC_MATCH.CNF within the performance timer TP_match_response. The CNF carries the NMK (Network Membership Key) and NID (Network ID) needed by the EV to join the EVSE’s logical network.  
  – If the EVSE receives another CM_SLAC_MATCH.REQ from the same EV (e.g. because the CNF was lost), it shall retransmit CM_SLAC_MATCH.CNF.  
  – If CM_SLAC_MATCH.REQ arrives with invalid content (i.e. fields that deviate from the definitions in Table A.7), the EVSE shall ignore it.  

4. Sequence Flow (Excerpt)  
  1. EV side completes attenuation characterization and (optionally) validation.  
  2. EV → EVSE: CM_SLAC_MATCH.REQ (unicast)  
  3. EVSE → EV: CM_SLAC_MATCH.CNF (unicast, within TP_match_response)  
  4. EV and EVSE each set the received NMK in their low‑layer modules (CM_SET_KEY exchange).  
  5. EV attempts to join the EVSE’s private network; upon successful link establishment (within TT_match_join) both sides issue D‑LINK_READY to their higher‑layer entities.  

By carrying the RunID, MAC addresses, and identifiers of both the EV and EVSE, CM_SLAC_MATCH.REQ enables secure and unambiguous creation of a private HomePlug Green PHY network for ISO 15118 communication.

================================================================================

Question: What is CM_SLAC_MATCH.CNF?

Answer: Overview  
CM_SLAC_MATCH.CNF is a unicast MAC‐Management Entity (MME) message sent by the EVSE’s low‐layer Power Line Communication (PLC) module to the EV’s PLC module. It serves as the confirmation of the CM_SLAC_MATCH.REQ, supplying the EV with the private network parameters (Network ID and Network Membership Key) needed to join the EVSE’s HomePlug Green PHY logical network.

1. Context and Role  
  • Located in clause A.9.5 “Joining the logical network” of the SLAC (Signal‑Level Attenuation Characterization) matching process.  
  • Exchanged after the EV has:  
   – Measured attenuation and optionally validated the correct EVSE (per clauses A.9.1–A.9.3)  
   – Issued CM_SLAC_MATCH.REQ with its PEV/EVSE MAC addresses and a matching runID  
  • On receipt, the EV extracts the NID and NMK from CM_SLAC_MATCH.CNF to configure its low‐layer communciation module and attempt to join the private network.

2. Message Format (Table A.7 — CM_SLAC_MATCH.CNF)  
  Field               | Octet(s)   | Size (octets) | Value / Definition  
  --------------------|------------|---------------|------------------------------------------  
  APPLICATION_TYPE    | 0          | 1             | 0x00 (fixed “PEV‑EVSE matching”)  
  SECURITY_TYPE       | 1          | 1             | 0x00 (fixed “No Security”)  
  MVFLength           | 2–3        | 2             | 0x56 (fixed length for matching CNF)  
  PEV ID              | 4–20       | 17            | –                                           
  PEV MAC             | 21–26      | 6             | MAC address of EV Host                   
  EVSE ID             | 27–43      | 17            | –                                           
  EVSE MAC            | 44–49      | 6             | MAC address of EVSE Host                 
  RunID               | 50–57      | 8             | Echo of the runID sent in CM_SLAC_PARM.REQ  
  RSVD                | 58–65      | 8             | 0x00 (reserved)                            
  NID                 | 66–72      | 7             | Network ID derived from the NMK by EVSE   
  RSVD                | 73         | 1             | 0x00 (reserved)                            
  NMK                 | 74–89      | 16            | Private Network Membership Key (random)  

3. EV Handling of CM_SLAC_MATCH.CNF  
  • Validation  
   – The EV shall verify that the content exactly matches the field definitions in Table A.7.  
   – Any deviation (invalid MVFLength, incorrect octet sizes, missing fields) renders the CNF invalid and it must be ignored.  
  • Configuration  
   – After accepting a valid CM_SLAC_MATCH.CNF, the EV uses the contained NID and NMK to configure its low‐layer module (typically via CM_SET_KEY.REQ).  
   – Alternative configuration methods producing equivalent results are permitted (NOTE 1).  
  • Link Establishment  
   – Once configured, the EV must establish a PLC link using the new NMK/NID within TT_match_join (≈12 s).  
   – If no link is formed within this timer, the EV considers the matching process FAILED and may retry from the beginning (A.9.5.3.2).

4. Related Sequence (Figure A.2 — HomePlug Green PHY Matching Process, Part 2)  
  Step 11: EV PLC Node → CM_SLAC_MATCH.REQ (unicast)  
  Step 12: EVSE PLC Node → CM_SLAC_MATCH.CNF (unicast)  
  Step 13: EV Host / EV PLC Node → CM_SET_KEY.REQ with NMK/NID  
  Step 14: CM_SET_KEY.CNF confirms key installation  
  Step 15: EV attempts link join within TT_match_join  
  Step 16: (Optional) CM_AMP_MAP exchange or D‑LINK_READY notification  

5. Timing Constraints  
  • TT_match_session (≤ 500 ms): Time from CM_ATTEN_CHAR.RSP to sending CM_SLAC_MATCH.REQ.  
  • TT_EVSE_match_session (≤ 10 s): EVSE must respond with CM_SLAC_MATCH.CNF.  
  • TT_match_join (≤ 12 s): EV must complete link establishment after CM_SLAC_MATCH.CNF.  

6. Error Handling  
  • Invalid CM_SLAC_MATCH.CNF → ignore and consider matching failed if no replacements are received.  
  • Timeout on link establishment → matching FAILED; EV resets to SLAC_init for a new attempt.  

References  
  • Table A.7 — MMEs parameters definition for logical network parameter exchange  
  • A.9.5 Joining the logical network / A.9.5.3.2 EV side  
  • Figure A.2 — Sequence chart of HomePlug Green PHY matching process (part 2)

================================================================================

Question: What is CM_SET_KEY.REQ?

Answer: Overview  
CM_SET_KEY.REQ is a management message (MME) primitive used by an electric‑vehicle supply equipment (EVSE) or electric vehicle (EV) to configure its low‑layer communication module with new cryptographic network parameters—specifically the Network Identifier (NID) and Network Membership Key (NMK). This unicast request is sent to the local data‑link/physical layer entity (e.g. the HomePlug Green PHY modem) to install the supplied keying material before—or as part of—joining a logical network.

1. Message Role and Context  
  • MME name: CM_SET_KEY.REQ  
  • Destination: Local low‑layer communication node (unicast)  
  • Purpose: Instruct the modem to update its key store with a new NMK (NewKey) under the specified key type (NewEKS) and associate it with the given NID.  
  • Usage example (A.9.5.3.3 EVSE side): After sending CM_SLAC_MATCH.CNF containing the newly negotiated NID/NMK, the EVSE must configure its communication module by issuing CM_SET_KEY.REQ. This may occur immediately after matching or at any time prior to a subsequent matching process to ensure correct reception of CM_SLAC_MATCH.REQ retries.

2. Field Definition (Table A.8 excerpt)  
   The CM_SET_KEY.REQ payload is 38 octets long, with the following fixed and variable fields:

   • Octet 0: Key Type (1 octet)  
     – Value: 0x01  
     – Indicates “NMK.”  

   • Octets 1–4: My Nonce (4 octets)  
     – Value: 0x00000000  
     – Fixed; no encrypted payload used.  

   • Octets 5–8: Your Nonce (4 octets)  
     – Value: 0x00000000  
     – Fixed; no encrypted payload used.  

   • Octet 9: PID (1 octet)  
     – Value: 0x04  
     – Fixed to indicate “High‑Layer Entity (HLE) protocol.”  

   • Octets 10–11: PRN (2 octets)  
     – Value: 0x0000  
     – Fixed; no encrypted payload used.  

   • Octet 12: PMN (1 octet)  
     – Value: 0x00  
     – Fixed; no encrypted payload used.  

   • Octet 13: CCo Capability (1 octet)  
     – Variable; conveys the Capability of the Connection Coordinator (station role).  

   • Octets 14–20: NID (7 octets)  
     – 54 least‑significant bits contain the logical network identifier; most‑significant 2 bits = 0b00.  

   • Octet 21: NewEKS (1 octet)  
     – Value: 0x01  
     – Indicates the key in NewKey is an “NMK.”  

   • Octets 22–37: NewKey (16 octets)  
     – Variable; contains the 128‑bit NMK to be installed.

3. Sequence and Timing (Related to A.9.5 Joining the Logical Network)  
  • Immediately after CM_SLAC_MATCH.CNF, the EVSE starts its TT_match_join timer (max. 12 s).  
  • The CM_SET_KEY.REQ must be delivered to the low‑layer module before—or at the latest immediately after—sending CM_SLAC_MATCH.CNF so that subsequent CM_SLAC_MATCH.REQ retries by the EV are not missed.  
  • If TT_match_join expires without link establishment, the matching process fails and is retried.

4. References  
  • Table A.8 provides the full field‑by‑field definition of CM_SET_KEY.REQ.  
  • A.9.5.3.3 “EVSE side” describes the requirement to use CM_SET_KEY.REQ for configuring NID/NMK.  
  • Timing parameters (e.g. TT_match_join) are found in Table A.1 under Annex A.8.

================================================================================

Question: What is CM_SET_KEY.CNF?

Answer: Overview  
CM_SET_KEY.CNF is the confirmation primitive (MME) used by the low‑layer communication module to acknowledge the configuration of logical‑network parameters that were requested by a preceding CM_SET_KEY.REQ. It plays a key role in the “joining the logical network” phase of the SLAC‑based matching process between an EV and an EVSE.

1. Role in Joining the Logical Network  
   • After an EV and EVSE have completed SLAC matching (i.e. after the EV has received CM_SLAC_MATCH.CNF), the EV must configure its low‑layer communication module with the network parameters supplied by the EVSE.  
   • The EV sends a CM_SET_KEY.REQ containing fields such as Key Type, NID, NewKey (see Table A.8).  
   • Once the low‑layer module has applied those parameters, it responds with CM_SET_KEY.CNF to signal completion (success or failure).  
   • Only once CM_SET_KEY.CNF is received (or handled according to implementation rules) can the EV consider itself fully joined to the EVSE’s logical network.

2. Configuration Primitives (MMEs)  
   Table A.8 defines the parameters carried in CM_SET_KEY.REQ. CM_SET_KEY.CNF has no payload fields beyond indicating whether the configuration succeeded or failed.  
     
   Table A.8 — CM_SET_KEY.REQ fields for joining the logical network  
   • Key Type (octet 0) – fixed 0x01 (“NMK”)  
   • My Nonce (octets 1–4) – fixed 0x00000000  
   • Your Nonce (octets 5–8) – fixed 0x00000000  
   • PID (octet 9) – fixed 0x04 (“HLE protocol”)  
   • PRN (octets 10–11) – fixed 0x0000  
   • PMN (octet 12) – fixed 0x00  
   • CCo Capability (octet 13) – variable, per station role  
   • NID (octets 14–20) – 54 LSBs = NID, 2 MSBs = 0b00  
   • NewEKS (octet 21) – fixed 0x01 (“NMK”)  
   • NewKey (octets 22–37) – 16 octets of the new NMK  

3. Sequence Context  
   • Refer to Figure A.7 (“Sequence chart of joining the logical network”) for the overall message flow.  
   • The order around CM_SET_KEY is:  
     1. EV ← CM_SLAC_MATCH.CNF (from EVSE)  
     2. EV → low‑layer node via CM_SET_KEY.REQ (unicast)  
     3. low‑layer node → EV via CM_SET_KEY.CNF  

4. Error Handling and Timing  
   • According to A.9.5.3.2: “It is up to the implementation how to handle a negative response in a CM_SET_KEY.CNF or a missing CM_SET_KEY.CNF at all.”  
   • On the EV side, if no CM_SET_KEY.CNF arrives within max(TT_match_join), the matching process shall be considered FAILED.  
   • On the EVSE side, there is no strict requirement that CM_SET_KEY.REQ/CNF occur immediately after CM_SLAC_MATCH.CNF; configuration may occur at any time before the EV attempts to use the network.

5. Standards References  
   • SLAC matching and logical‑network joining are defined in A.9 of ISO 15118‑3 (HomePlug Green PHY on control‑pilot line).  
   • MMEs CM_SET_KEY.REQ and CM_SET_KEY.CNF are the mandated primitives for applying network parameters in the low‑layer communication module.

================================================================================

Question: What is CM_AMP_MAP.REQ?

Answer: Overview  
CM_AMP_MAP.REQ is a management message entry (MME) defined in the HomePlug GreenPHY profile of ISO 15118‑3. It is used during an optional “amplitude map exchange” between an Electric Vehicle (EV) and an Electric Vehicle Supply Equipment (EVSE) to request modification of transmit‑power levels (per subcarrier) in the underlying low‑layer (PLC) communication link.  

1. Functional Description  
1.1 Purpose  
- Allows one side (EV or EVSE) to request that the counterpart reduce transmit power on specified carriers, in order to comply with local power spectral‑density (PSD) regulations or to avoid interference.  
- Two modes of use:  
  • Host→local low‑layer module: immediately causes that module to apply the requested power reductions.  
  • Host→remote host (via low‑layer): carries information about desired power reductions for the remote node’s amplitude‑map calculation; it does not directly change power until the remote host issues its own CM_AMP_MAP.REQ to its local module.  

1.2 Exchange Procedure  
- The requesting device sends CM_AMP_MAP.REQ.  
- The counterpart low‑layer communication module must reply with CM_AMP_MAP.CNF.  
- After confirmation, the local module applies the new per‑carrier attenuation settings.  
- Until the amplitude map exchange completes and the link is re‑established, higher layers must defer any “link ready” indications.  

1.3 Reference Levels and Resolution  
- All power values relate to a reference of –50 dBm/Hz.  
- AMDATA fields use a 2 dB resolution: each 4‑bit value N encodes an attenuation of N×2 dB. For example, 0b0011 (3) means –6 dB relative to –50 dBm/Hz.  

2. Message Definition (Table A.9)  
CM_AMP_MAP.REQ is a Unicast MME with the following fields:  
• AMLEN (octets 0–1, 2 octets): fixed value 0x003A, indicating the number of carriers used in the amplitude map.  
• AMDATA[0…n] (each 4 bits): one 4‑bit attenuation value per carrier, in order from the first carrier upward.  

CM_AMP_MAP.CNF is the corresponding confirmation MME (Unicast) with a 1‑octet ResType field:  
• 0x00 = success  
• 0x01 = failure  
• 0x02–0xFF = reserved  

3. Sequence of Amplitude Map Exchange (Figure A.8)  
- Trigger: either low‑layer module detects the link is up and decides that additional carriers must be notched, or a higher‑layer application initiates an exchange.  
- The initiator sends CM_AMP_MAP.REQ.  
- The recipient replies with CM_AMP_MAP.CNF within TP_match_response (see Section 4).  
- If no valid CNF arrives within TT_match_response, the requester retransmits CM_AMP_MAP.REQ (up to C_EV_match_retry times).  
- After a successful round, both sides reconfigure their local amplitude maps and then signal link readiness to higher layers.  

4. Timings and Constants (excerpt from Table A.1)  
• TP_amp_map_exchange: 100 ms (max)  
 – Time within which CM_AMP_MAP.REQ must be sent after the PLC link is detected, to trigger an amplitude map exchange.  
• TT_amp_map_exchange: 200 ms (max)  
 – Timeout on both EV and EVSE sides; if no CM_AMP_MAP.REQ arrives and none is sent, the modules assume no exchange will take place and issue D‑LINK_READY.indication.  
• TP_match_response / TT_match_response: 100 ms / 200 ms (max)  
 – Performance and timeout timers for waiting for CM_AMP_MAP.CNF after sending CM_AMP_MAP.REQ.  

5. Example: Request of Transmission Power Limitation  
(6 carriers assumed for illustration)  
- EVSE wishes to limit carriers 2 and 3 to –78 dBm/Hz; other carriers remain at default.  
- Relative to –50 dBm/Hz, –78 dBm/Hz is –28 dB → 14 steps of 2 dB → 0xE.  
- CM_AMP_MAP.REQ payload AMDATA = {0, 14, 14, 0, 0, 0}.  
- Upon receipt, the EV Host compares these to its default socket PSD (e.g., {–75, –75, –77, –77, –75, –75} dBm/Hz):  
  • Carrier 2: –75 vs. –78 → must reduce by 3 dB (send 0xE).  
  • Carrier 3: –77 vs. –78 → must reduce by 1 dB (0x7 → rounded to nearest 2 dB step = 0x1?).  
- EV Host replies with CM_AMP_MAP.CNF (ResType=0x00) and programs its low‑layer module accordingly by issuing its own CM_AMP_MAP.REQ to the module’s local address.  

6. Error Handling and Validation  
- If a low‑layer module receives CM_AMP_MAP.REQ or CM_AMP_MAP.CNF with invalid content (i.e., deviating from Table A.9 definitions), it must ignore the message.  
- If no CNF is received within TT_match_response, retransmissions occur, and the matching process is considered failed after C_EV_match_retry attempts.  

7. References  
- Table A.9 (MMEs parameters definition for amplitude map exchange)  
- Figure A.8 (Sequence chart of amplitude map exchange)  
- Table A.1 (Timing and constant values, Annex A)  
- Clauses A.9.6.1–A.9.6.3.2, ISO 15118‑3: Physical and data link layer requirements for Vehicle‑to‑Grid communication.

================================================================================

Question: What is CM_AMP_MAP.CNF?

Answer: Overview  
CM_AMP_MAP.CNF is the Management Message Entry (MME) confirmation message used in the optional amplitude‐map exchange between two HomePlug Green PHY low‑layer communication modules (e.g. EV PLC node and EVSE PLC node) as defined in ISO 15118‑3 Annex A. Its purpose is to confirm receipt of a CM_AMP_MAP.REQ and to report success or failure of the requested amplitude‐map configuration.

1. Message Definition and Format  
   According to Table A.9 in ISO 15118‑3:  
   • MME Name: CM_AMP_MAP.CNF (Unicast)  
   • Field: ResType  
     – Octet no.: 0  
     – Field size: 1 Octet  
     – Value: variable  
     – Definition: Result code  
       • 0x00 = success  
       • 0x01 = failure  
       • 0x02–0xFF = reserved  

2. Role in the Amplitude Map Exchange Process  
   – The amplitude‐map exchange is an optional function (Clause A.9.6.1) used to request the counterpart low‑layer module to reduce transmission power on specified carriers (tone mask) relative to a −50 dBm/Hz reference.  
   – A CM_AMP_MAP.REQ command carries AMDATA values (4 bits per carrier) specifying per‑carrier attenuation.  
   – The receiving low‑layer module must reply with CM_AMP_MAP.CNF to confirm whether the request can be applied.  

3. Sequence and Timing (see Figure A.8)  
   – After SLAC_MATCH and key‑setting, either side may initiate the amplitude‐map exchange by sending CM_AMP_MAP.REQ within TP_amp_map_exchange (max 100 ms typical).  
   – The requested node shall issue CM_AMP_MAP.CNF within max(TP_match_response, TT_match_response) (typical 100 ms) to acknowledge the request [V2G3‑A09‑115].  
   – If no valid CM_AMP_MAP.CNF is received, the requester shall retransmit CM_AMP_MAP.REQ (up to C_EV_match_retry times) [V2G3‑A09‑112].  
   – If CM_AMP_MAP.CNF arrives but contains invalid content (deviates from Table A.9 definition), it shall be ignored [V2G3‑A09‑114].  
   – If the requested node sees a duplicate CM_AMP_MAP.REQ (implying the original was lost), it shall respond again with CM_AMP_MAP.CNF [V2G3‑A09‑116].  

4. Behavior on Success and Failure  
   – On success (ResType = 0x00), the low‑layer module applies the new per‑carrier attenuation to its PLC transmitter.  
   – On failure (ResType = 0x01), no change is made. The host or higher‑layer logic may decide whether to retry or continue with the default amplitude map.  

5. Related Primitives and References  
   – CM_AMP_MAP.REQ: carries AMLEN (fixed length, 2 Octets) and AMDATA[n] attenuation values (4 bits each) for each carrier.  
   – Table A.9: definitions of both CM_AMP_MAP.REQ and CM_AMP_MAP.CNF fields.  
   – Figure A.8 (Sequence chart of amplitude‐map exchange) shows the handshaking: CM_AMP_MAP.REQ → CM_AMP_MAP.CNF.  
   – Default amplitude map is used if no exchange is triggered [V2G3‑A09‑108, V2G3‑A09‑117].  

By providing an explicit success/failure code in a single‑octet ResType field, CM_AMP_MAP.CNF ensures reliable agreement between EV and EVSE low‑layer communication modules on any transmission‐power adjustments required for regulatory compliance or interference avoidance.

================================================================================

Question: What is D-LINK_READY.indication?

Answer: Overview  
D-LINK_READY.indication is a service primitive defined in ISO 15118‑3 (V2G Part 3) for AC charging. It is generated by the low‑layer communication module (e.g., PLC stack) in both the EV and the EVSE to inform higher layers (HLE) about any change in the status of the data‐link. The indication carries a parameter D‑LINKSTATUS, which can be either “link established” or “no link.” It is used throughout the matching process, wake‑up, logical network setup/leave, and error handling to trigger higher‑level procedures (e.g., binding or restart of matching).

1. Primitive Definition  
Table 4 below summarizes the definition of the D‑LINK_READY.indication primitive.

  Table 4 — D-LINK_READY.indication primitive  
  Primitive:               D‑LINK_READY.indication  
  Entity to support:       EV, EVSE  
  Parameter name:          D‑LINKSTATUS  
  Description:  
    Status of communication link:  
     • no link  
     • link established  

2. Parameter  
  • D‑LINKSTATUS  
    – “link established” indicates that a valid data‑link has been set up and higher layers may begin their binding or protocol exchange.  
    – “no link” indicates that the data‑link is not present (or has been lost) and higher layers must abort or restart matching.

3. Usage Scenarios  
  3.1 Wake‑up Detection  
    • Context: Clause 7.6.2 “Wake‑up”  
    • Trigger: After the node (EV or EVSE) wakes from sleep and the lower layers detect an existing data‑link.  
    • Action: Send D‑LINK_READY.indication(link established) to HLE.  
  3.2 Logical Network Setup  
    • Context: Clause 9.5 “Set‑up a logical network”  
    • Trigger: EV successfully joins the logical network of the EVSE (state becomes “Matched”).  
    • Action: Send D‑LINK_READY.indication(link established) to HLE so that HLE’s binding process can begin.  
  3.3 Leave Logical Network  
    • Context: Clause 9.6 “Leave the logical network”  
    • Trigger: The low‑layer communication module leaves the logical network (e.g., after a D‑LINK_TERMINATE.request).  
    • Action: Send D‑LINK_READY.indication(no link) to HLE.  
  3.4 Matching Process Transitions  
    • Context: Clause 9.1 “Overview” and Figure 11 (Matching state machine)  
    • Trigger: Any transition from the “Matching” state—whether success (to “Matched”) or failure (back to “Unmatched”).  
    • Action: Call D‑LINK_READY.indication with the appropriate status.  
  3.5 Loss of Communication (Error Handling)  
    • Context: Clause 7.5 “Loss of communication”  
    • Trigger: After a data‑link has been established and D‑LINK_READY.indication(link established) was already sent, any detected loss of the data‑link.  
    • Action: Immediately send D‑LINK_READY.indication(no link) to HLE. Higher layers then handle recovery via D‑LINK_ERROR.request.  
  3.6 External Reset Conditions  
    • Trigger: Loss of control‑pilot signal or an explicit request from HLE to reset.  
    • Action: Reset matching state to “Unmatched” and send D‑LINK_READY.indication(no link).

4. Timing Requirements  
  • TP_link_ready_notification (Table A.1)  
    – Performance timer for the time between detection of other stations (after SLAC_MATCH exchange) and sending D‑LINK_READY.indication(link established).  
    – Typical: 0.2 s, Max: 1 s.  
    – Reference: Annex A.9.6.3.2 [V2G3‑A09‑120].

5. Relation to the Matching State Machine (Figure 11)  
  • Default state at plug‑in is “Unmatched.”  
  • A CP state change to B/C/D triggers “Matching.”  
  • Success → “Matched”: send D‑LINK_READY.indication(link established).  
  • Failure or control‑pilot loss → return to “Unmatched”: send D‑LINK_READY.indication(no link).

6. Relation to the EV Point‑of‑View Flow (Figure 10)  
  • After “Setup logical network,” the EV checks “Data link established?”  
    – Yes → Call D‑LINK_READY.indication(link established)—exit with success.  
    – No  → Call D‑LINK_READY.indication(no link)—exit with failure.  
  • Any failure or ambiguous result before network setup also leads to D‑LINK_READY.indication(no link).

7. Related Primitives  
  • D‑LINK_TERMINATE.request  – Requests lower layers to terminate the data‑link (Table 5).  
  • D‑LINK_ERROR.request      – Requests lower layers to terminate the data‑link and restart matching (Table 6).  
  • D‑LINK_PAUSE.request      – Requests lower layers to enter power‑saving mode while keeping state “Matched.”

Summary  
D‑LINK_READY.indication is the standardized notification primitive in ISO 15118‑3 for reporting any change in the presence or absence of a data‑link to higher layers. It enables correct synchronization between physical/data‑link events (matching, wake‑up, join, leave, error) and higher‑level charging protocols.

================================================================================

Question: What is D-LINK_TERMINATE.request?

Answer: Overview  
D-LINK_TERMINATE.request is a service primitive defined in ISO 15118‑3 that allows higher‑layer entities (HLE) in both the EV and the EVSE to instruct the data‑link layer to tear down an active logical network. Upon reception of this request, the low‑layer communication module must abort the current link, reset link‑related parameters, and revert its matching state to “Unmatched.”

1. Primitive Definition  
   Table 5 — D-LINK_TERMINATE.request primitive  
     • Primitive: D-LINK_TERMINATE.request  
     • Entity to support: EV, EVSE  
     • Description: Requests lower layers to terminate the data link.  

2. Functional Behavior  
   2.1 Leaving the Logical Network  
     – On receipt of D-LINK_TERMINATE.request from a higher layer entity (HLE), the communication node (EV or EVSE) shall:  
       • Leave the logical network.  
       • Reset all parameters related to the current link to their default values.  
       • Reset the Network Membership Key (NMK).  
       • Change its matching status to “Unmatched.”  
     – This procedure shall follow the “Leaving an AVLN” sequence as specified in the HomePlug Green PHY (HPGP) standard.  

   2.2 Timing Constraint  
     – The logical‑network teardown must complete within the maximum time TP_match_leave.  
     – From Table 3 (Timing and constant values):  
         Parameter: TP_match_leave  
         Description: Maximum time to leave the logical network  
         Max: 1 s  

3. Interaction with the Matching State Machine (Figure 11)  
   – In the high‑level overview of the matching process, the default PLC node state at plug‑in is “Unmatched.”  
   – Any loss of the control pilot signal or a D-LINK_TERMINATE.request from HLE triggers an immediate reset to state “Unmatched.”  
   – After termination, the system awaits the next control‑pilot transition to begin a new matching sequence.  

4. Relationship to Other Primitives  
   – D-LINK_READY.indication: After link termination (whether due to D-LINK_TERMINATE.request or loss of pilot), the data‑link layer shall send D-LINK_READY.indication to HLE with status “no link.”  
   – D-LINK_ERROR.request: By contrast, this primitive also terminates the link but then restarts matching via a pilot‑state transition through E.  

5. Context and Purpose  
   – Without D-LINK_TERMINATE.request, the logical‑network controller may require several seconds to detect that the peer has left the network.  
   – This primitive provides a faster, deterministic way for higher layers to abort the link (e.g., on session end or in response to a user action) and prepare for a fresh matching process or shut down communication.

================================================================================

Question: What is D-LINK_ERROR.request?

Answer: Overview  
D‑LINK_ERROR.request is a low‑layer service primitive defined in ISO 15118‑3 (Clause 12.3/Table 6). It is invoked by higher‑level entities (HLE) to force the termination of an existing data link and to restart the matching process via a Control Pilot transition through state E. This mechanism is used whenever the link between EV and EVSE is lost or needs to be reset after being established.

1. Definition and Purpose  
  • Primitive name: D‑LINK_ERROR.request  
  • Defined in: ISO 15118‑3, Clause 12.3 “Data link control SAP to layer 3”  
  • Purpose:  
    – Request the lower‐layer communication module to terminate the current data link  
    – Trigger a restart of the EV/EVSE matching procedure by driving Control Pilot through state E  

2. Entity Support  
  According to Table 6, D‑LINK_ERROR.request is supported by the EVSE’s low‐layer communication node. However, both EVSE and EV layers implement behavior on reception of this request (see Section 5).  

3. Trigger Conditions  
  • A loss of communication after a data link was already established (i.e., after D‑LINK_READY.indication(link established))  
  • Any error condition in the higher layers requesting a reset of the link (for example, HLC‑C timeout or protocol failure)  

4. Primitive Specification (Table 6 excerpt)  
  Primitive          Entity to support  
  D‑LINK_ERROR.request EVSE  

5. Behavior on Reception of D‑LINK_ERROR.request  

  5.1 EVSE‑Side Behavior  
    Error handling depends on the current Control Pilot (CP) duty‑cycle state.  

    5.1.1 With CP duty cycle = 5 % (state X1)  
      • [V2G3‑M07‑04] On reception in X1:  
        – Transition: X1 → E/F → X1 or X2  

    5.1.2 With nominal CP duty cycle (state X2)  
      • [V2G3‑M07‑05] On reception in X2:  
        – Transition: X2 → X1 → E/F → X1 or X2  
      • Options (7.5.1.2):  
        – Option A (cycle‑independent):  
          • Apply the same steps as in 5.1.1 (i.e., go through X1→E/F→…)  
        – Option B (no interruption to charging current):  
          • [V2G3‑M07‑12] Remain in X2  
          • Leave logical network within TP_match_leave  
          • Change matching state to “Unmatched” ready for a new matching  

  5.2 EV‑Side Behavior  
    Similarly, the EV’s communication node must abandon the current link and matching state.  

    5.2.1 With CP duty cycle = 5 % (state X1 or X2 at 5 %)  
      • [V2G3‑M07‑13] On reception:  
        – Change to Bx state  
        – Leave logical network and set matching = “Unmatched” within TP_match_leave  
        – Wait for a new matching trigger (CP transition to X1 or X2)  

    5.2.2 With nominal CP duty cycle (state X2)  
      • [V2G3‑M07‑16] On reception:  
        – Keep current CP state  
        – Leave logical network and set matching = “Unmatched”  
      • Options (7.5.2.2):  
        – Option A (cycle‑independent):  
          • Apply steps of 5.2.1  
        – Option B:  
          • As per [V2G3‑M07‑16], remain in current state  
      • Post‑reset behavior:  
        – [V2G3‑M07‑17] After T_conn_resetup, EV shall restart the matching process  
        – [V2G3‑M07‑18] During T_conn_resetup, EV must be prepared to be forced to restart by an EVSE using Option A  

6. Timing Parameters (from Table 3)  
  Parameter              Description                                         Max/Unit  
  TP_match_leave         Maximum time to leave logical network               1 s  
  T_step_EF              Time to stay at E/F state                           4 s  
  T_conn_resetup         Time to reset matching process after loss           15 s  

7. Related Primitives  
  • D‑LINK_READY.indication: notifies higher layers of link established or lost  
  • D‑LINK_TERMINATE.request: orderly termination of the data link  
  • D‑LINK_PAUSE.request: enter low‑power mode while remaining “Matched”  

Summary  
D‑LINK_ERROR.request is the standardized command from the higher layers to the low‑layer communication module—primarily on the EVSE side—to abort the current data link and force a fresh matching cycle. Its correct implementation ensures robust recovery from communication failures by driving the Control Pilot through state E and resetting the EV/EVSE matching state.

================================================================================

Question: What is D-LINK_PAUSE.request?

Answer: Overview  
The D‑LINK_PAUSE.request primitive, defined in ISO 15118‑3 (Part 3) “Physical and data link layer requirements,” is used by higher layers (the HLC protocol) to instruct the data‑link/control‑pilot sublayers on both the EV and EVSE sides to enter a low‑power (sleep) mode while preserving the established data‑link state (“Matched”).  

1. D‑LINK_PAUSE.request Primitive  
   • Location: Table 7 in clause 12.3 (Data link control SAP to layer 3) of ISO 15118‑3.  
   • Purpose: Request lower layers to enter a power‑saving mode.  
   • Effect on Data Link State: The data‑link state remains “Matched” throughout the pause.  

2. EV‑Side Requirements  
   Upon receiving D‑LINK_PAUSE.request, the EV shall:  
   • Transition its control pilot to state Bx.  
   • Optionally power down or idle its low‑layer (PLC) communication module.  
   • Store the current logical network parameter set so that the data link can be resumed seamlessly after the sleep phase.  

3. EVSE‑Side Requirements  
   Upon receiving D‑LINK_PAUSE.request, the EVSE shall:  
   • Transition its control pilot to state X1.  
   • Optionally power down or idle its low‑layer communication module (e.g., oscillator off).  
   • Store the current logical network parameter set for later re‑use when waking up.  

4. Sleep Mode Context  
   • Sleep mode is an energy‑saving state negotiated by the high‑level communication protocol (HLC).  
   • Entered only after a D‑LINK_PAUSE.request has been exchanged.  
   • On EV side, “sleep mode” corresponds to control pilot state B (with the low‑layer module possibly unpowered).  
   • On EVSE side, “sleep mode” corresponds to control pilot state X1, with +12 V kept on the pilot line but the oscillator and PLC node optionally powered off.  

5. Maintaining and Resuming the Data Link  
   • While paused, the logical network configuration remains intact, and the data‑link status in both EV and EVSE stays “Matched.”  
   • After wake‑up is triggered (via control pilot transitions or BCB‑toggle), each side reloads its stored network parameters to re‑establish the PLC link without a full matching restart.

================================================================================

